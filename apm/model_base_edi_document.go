/*
 * Partner Manager Partners API
 *
 * Anypoint Partner Manager - Partners API
 *
 * API version: v1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apm

import (
	"encoding/json"
)

// BaseEdiDocument struct for BaseEdiDocument
type BaseEdiDocument struct {
	Id *string `json:"id,omitempty"`
	Name string `json:"name"`
	IsStandard bool `json:"isStandard"`
	EdiDocumentTypeId string `json:"ediDocumentTypeId"`
	BaseType *EdiDocumentType `json:"baseType,omitempty"`
}

// NewBaseEdiDocument instantiates a new BaseEdiDocument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseEdiDocument(name string, isStandard bool, ediDocumentTypeId string) *BaseEdiDocument {
	this := BaseEdiDocument{}
	this.Name = name
	this.IsStandard = isStandard
	this.EdiDocumentTypeId = ediDocumentTypeId
	return &this
}

// NewBaseEdiDocumentWithDefaults instantiates a new BaseEdiDocument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseEdiDocumentWithDefaults() *BaseEdiDocument {
	this := BaseEdiDocument{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BaseEdiDocument) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseEdiDocument) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BaseEdiDocument) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BaseEdiDocument) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *BaseEdiDocument) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BaseEdiDocument) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BaseEdiDocument) SetName(v string) {
	o.Name = v
}

// GetIsStandard returns the IsStandard field value
func (o *BaseEdiDocument) GetIsStandard() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsStandard
}

// GetIsStandardOk returns a tuple with the IsStandard field value
// and a boolean to check if the value has been set.
func (o *BaseEdiDocument) GetIsStandardOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IsStandard, true
}

// SetIsStandard sets field value
func (o *BaseEdiDocument) SetIsStandard(v bool) {
	o.IsStandard = v
}

// GetEdiDocumentTypeId returns the EdiDocumentTypeId field value
func (o *BaseEdiDocument) GetEdiDocumentTypeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EdiDocumentTypeId
}

// GetEdiDocumentTypeIdOk returns a tuple with the EdiDocumentTypeId field value
// and a boolean to check if the value has been set.
func (o *BaseEdiDocument) GetEdiDocumentTypeIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EdiDocumentTypeId, true
}

// SetEdiDocumentTypeId sets field value
func (o *BaseEdiDocument) SetEdiDocumentTypeId(v string) {
	o.EdiDocumentTypeId = v
}

// GetBaseType returns the BaseType field value if set, zero value otherwise.
func (o *BaseEdiDocument) GetBaseType() EdiDocumentType {
	if o == nil || o.BaseType == nil {
		var ret EdiDocumentType
		return ret
	}
	return *o.BaseType
}

// GetBaseTypeOk returns a tuple with the BaseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseEdiDocument) GetBaseTypeOk() (*EdiDocumentType, bool) {
	if o == nil || o.BaseType == nil {
		return nil, false
	}
	return o.BaseType, true
}

// HasBaseType returns a boolean if a field has been set.
func (o *BaseEdiDocument) HasBaseType() bool {
	if o != nil && o.BaseType != nil {
		return true
	}

	return false
}

// SetBaseType gets a reference to the given EdiDocumentType and assigns it to the BaseType field.
func (o *BaseEdiDocument) SetBaseType(v EdiDocumentType) {
	o.BaseType = &v
}

func (o BaseEdiDocument) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["isStandard"] = o.IsStandard
	}
	if true {
		toSerialize["ediDocumentTypeId"] = o.EdiDocumentTypeId
	}
	if o.BaseType != nil {
		toSerialize["baseType"] = o.BaseType
	}
	return json.Marshal(toSerialize)
}

type NullableBaseEdiDocument struct {
	value *BaseEdiDocument
	isSet bool
}

func (v NullableBaseEdiDocument) Get() *BaseEdiDocument {
	return v.value
}

func (v *NullableBaseEdiDocument) Set(val *BaseEdiDocument) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseEdiDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseEdiDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseEdiDocument(val *BaseEdiDocument) *NullableBaseEdiDocument {
	return &NullableBaseEdiDocument{value: val, isSet: true}
}

func (v NullableBaseEdiDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseEdiDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


