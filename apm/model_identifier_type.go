/*
 * Partner Manager Partners API
 *
 * Anypoint Partner Manager - Partners API
 *
 * API version: v1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apm

import (
	"encoding/json"
)

// IdentifierType Identifier Types
type IdentifierType struct {
	Id string `json:"id"`
	Name string `json:"name"`
	Label string `json:"label"`
	Description string `json:"description"`
	Readonly *bool `json:"readonly,omitempty"`
	Qualifiers []IdentifierTypeQualifier `json:"qualifiers"`
	EnvironmentId *string `json:"environment_id,omitempty"`
}

// NewIdentifierType instantiates a new IdentifierType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentifierType(id string, name string, label string, description string, qualifiers []IdentifierTypeQualifier) *IdentifierType {
	this := IdentifierType{}
	this.Id = id
	this.Name = name
	this.Label = label
	this.Description = description
	this.Qualifiers = qualifiers
	return &this
}

// NewIdentifierTypeWithDefaults instantiates a new IdentifierType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentifierTypeWithDefaults() *IdentifierType {
	this := IdentifierType{}
	return &this
}

// GetId returns the Id field value
func (o *IdentifierType) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *IdentifierType) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *IdentifierType) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *IdentifierType) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *IdentifierType) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *IdentifierType) SetName(v string) {
	o.Name = v
}

// GetLabel returns the Label field value
func (o *IdentifierType) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *IdentifierType) GetLabelOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *IdentifierType) SetLabel(v string) {
	o.Label = v
}

// GetDescription returns the Description field value
func (o *IdentifierType) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *IdentifierType) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *IdentifierType) SetDescription(v string) {
	o.Description = v
}

// GetReadonly returns the Readonly field value if set, zero value otherwise.
func (o *IdentifierType) GetReadonly() bool {
	if o == nil || o.Readonly == nil {
		var ret bool
		return ret
	}
	return *o.Readonly
}

// GetReadonlyOk returns a tuple with the Readonly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentifierType) GetReadonlyOk() (*bool, bool) {
	if o == nil || o.Readonly == nil {
		return nil, false
	}
	return o.Readonly, true
}

// HasReadonly returns a boolean if a field has been set.
func (o *IdentifierType) HasReadonly() bool {
	if o != nil && o.Readonly != nil {
		return true
	}

	return false
}

// SetReadonly gets a reference to the given bool and assigns it to the Readonly field.
func (o *IdentifierType) SetReadonly(v bool) {
	o.Readonly = &v
}

// GetQualifiers returns the Qualifiers field value
func (o *IdentifierType) GetQualifiers() []IdentifierTypeQualifier {
	if o == nil {
		var ret []IdentifierTypeQualifier
		return ret
	}

	return o.Qualifiers
}

// GetQualifiersOk returns a tuple with the Qualifiers field value
// and a boolean to check if the value has been set.
func (o *IdentifierType) GetQualifiersOk() (*[]IdentifierTypeQualifier, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Qualifiers, true
}

// SetQualifiers sets field value
func (o *IdentifierType) SetQualifiers(v []IdentifierTypeQualifier) {
	o.Qualifiers = v
}

// GetEnvironmentId returns the EnvironmentId field value if set, zero value otherwise.
func (o *IdentifierType) GetEnvironmentId() string {
	if o == nil || o.EnvironmentId == nil {
		var ret string
		return ret
	}
	return *o.EnvironmentId
}

// GetEnvironmentIdOk returns a tuple with the EnvironmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentifierType) GetEnvironmentIdOk() (*string, bool) {
	if o == nil || o.EnvironmentId == nil {
		return nil, false
	}
	return o.EnvironmentId, true
}

// HasEnvironmentId returns a boolean if a field has been set.
func (o *IdentifierType) HasEnvironmentId() bool {
	if o != nil && o.EnvironmentId != nil {
		return true
	}

	return false
}

// SetEnvironmentId gets a reference to the given string and assigns it to the EnvironmentId field.
func (o *IdentifierType) SetEnvironmentId(v string) {
	o.EnvironmentId = &v
}

func (o IdentifierType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["label"] = o.Label
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if o.Readonly != nil {
		toSerialize["readonly"] = o.Readonly
	}
	if true {
		toSerialize["qualifiers"] = o.Qualifiers
	}
	if o.EnvironmentId != nil {
		toSerialize["environment_id"] = o.EnvironmentId
	}
	return json.Marshal(toSerialize)
}

type NullableIdentifierType struct {
	value *IdentifierType
	isSet bool
}

func (v NullableIdentifierType) Get() *IdentifierType {
	return v.value
}

func (v *NullableIdentifierType) Set(val *IdentifierType) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentifierType) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentifierType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentifierType(val *IdentifierType) *NullableIdentifierType {
	return &NullableIdentifierType{value: val, isSet: true}
}

func (v NullableIdentifierType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentifierType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


