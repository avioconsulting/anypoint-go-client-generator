/*
 * Partner Manager Partners API
 *
 * Anypoint Partner Manager - Partners API
 *
 * API version: v1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apm

import (
	"encoding/json"
)

// CodeKeyVal struct for CodeKeyVal
type CodeKeyVal struct {
	Key string `json:"key"`
	Value string `json:"value"`
}

// NewCodeKeyVal instantiates a new CodeKeyVal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCodeKeyVal(key string, value string) *CodeKeyVal {
	this := CodeKeyVal{}
	this.Key = key
	this.Value = value
	return &this
}

// NewCodeKeyValWithDefaults instantiates a new CodeKeyVal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCodeKeyValWithDefaults() *CodeKeyVal {
	this := CodeKeyVal{}
	return &this
}

// GetKey returns the Key field value
func (o *CodeKeyVal) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *CodeKeyVal) GetKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *CodeKeyVal) SetKey(v string) {
	o.Key = v
}

// GetValue returns the Value field value
func (o *CodeKeyVal) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *CodeKeyVal) GetValueOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *CodeKeyVal) SetValue(v string) {
	o.Value = v
}

func (o CodeKeyVal) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["key"] = o.Key
	}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableCodeKeyVal struct {
	value *CodeKeyVal
	isSet bool
}

func (v NullableCodeKeyVal) Get() *CodeKeyVal {
	return v.value
}

func (v *NullableCodeKeyVal) Set(val *CodeKeyVal) {
	v.value = val
	v.isSet = true
}

func (v NullableCodeKeyVal) IsSet() bool {
	return v.isSet
}

func (v *NullableCodeKeyVal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCodeKeyVal(val *CodeKeyVal) *NullableCodeKeyVal {
	return &NullableCodeKeyVal{value: val, isSet: true}
}

func (v NullableCodeKeyVal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCodeKeyVal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


