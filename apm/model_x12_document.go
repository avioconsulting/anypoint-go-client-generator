/*
 * Partner Manager Partners API
 *
 * Anypoint Partner Manager - Partners API
 *
 * API version: v1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apm

import (
	"encoding/json"
)

// X12Document struct for X12Document
type X12Document struct {
	EdiDocument
	X12Version *string `json:"x12Version,omitempty"`
	TransactionSet *string `json:"transactionSet,omitempty"`
}

// NewX12Document instantiates a new X12Document object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewX12Document(formatType string) *X12Document {
	this := X12Document{}
	this.FormatType = formatType
	return &this
}

// NewX12DocumentWithDefaults instantiates a new X12Document object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewX12DocumentWithDefaults() *X12Document {
	this := X12Document{}
	return &this
}

// GetX12Version returns the X12Version field value if set, zero value otherwise.
func (o *X12Document) GetX12Version() string {
	if o == nil || o.X12Version == nil {
		var ret string
		return ret
	}
	return *o.X12Version
}

// GetX12VersionOk returns a tuple with the X12Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *X12Document) GetX12VersionOk() (*string, bool) {
	if o == nil || o.X12Version == nil {
		return nil, false
	}
	return o.X12Version, true
}

// HasX12Version returns a boolean if a field has been set.
func (o *X12Document) HasX12Version() bool {
	if o != nil && o.X12Version != nil {
		return true
	}

	return false
}

// SetX12Version gets a reference to the given string and assigns it to the X12Version field.
func (o *X12Document) SetX12Version(v string) {
	o.X12Version = &v
}

// GetTransactionSet returns the TransactionSet field value if set, zero value otherwise.
func (o *X12Document) GetTransactionSet() string {
	if o == nil || o.TransactionSet == nil {
		var ret string
		return ret
	}
	return *o.TransactionSet
}

// GetTransactionSetOk returns a tuple with the TransactionSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *X12Document) GetTransactionSetOk() (*string, bool) {
	if o == nil || o.TransactionSet == nil {
		return nil, false
	}
	return o.TransactionSet, true
}

// HasTransactionSet returns a boolean if a field has been set.
func (o *X12Document) HasTransactionSet() bool {
	if o != nil && o.TransactionSet != nil {
		return true
	}

	return false
}

// SetTransactionSet gets a reference to the given string and assigns it to the TransactionSet field.
func (o *X12Document) SetTransactionSet(v string) {
	o.TransactionSet = &v
}

func (o X12Document) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedEdiDocument, errEdiDocument := json.Marshal(o.EdiDocument)
	if errEdiDocument != nil {
		return []byte{}, errEdiDocument
	}
	errEdiDocument = json.Unmarshal([]byte(serializedEdiDocument), &toSerialize)
	if errEdiDocument != nil {
		return []byte{}, errEdiDocument
	}
	if o.X12Version != nil {
		toSerialize["x12Version"] = o.X12Version
	}
	if o.TransactionSet != nil {
		toSerialize["transactionSet"] = o.TransactionSet
	}
	return json.Marshal(toSerialize)
}

type NullableX12Document struct {
	value *X12Document
	isSet bool
}

func (v NullableX12Document) Get() *X12Document {
	return v.value
}

func (v *NullableX12Document) Set(val *X12Document) {
	v.value = val
	v.isSet = true
}

func (v NullableX12Document) IsSet() bool {
	return v.isSet
}

func (v *NullableX12Document) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableX12Document(val *X12Document) *NullableX12Document {
	return &NullableX12Document{value: val, isSet: true}
}

func (v NullableX12Document) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableX12Document) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


