/*
 * Partner Manager Partners API
 *
 * Anypoint Partner Manager - Partners API
 *
 * API version: v1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apm

import (
	"encoding/json"
)

// UsedInDeploymentsAllOf struct for UsedInDeploymentsAllOf
type UsedInDeploymentsAllOf struct {
	InboundCount *int32 `json:"inboundCount,omitempty"`
	OutboundCount *int32 `json:"outboundCount,omitempty"`
}

// NewUsedInDeploymentsAllOf instantiates a new UsedInDeploymentsAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsedInDeploymentsAllOf() *UsedInDeploymentsAllOf {
	this := UsedInDeploymentsAllOf{}
	return &this
}

// NewUsedInDeploymentsAllOfWithDefaults instantiates a new UsedInDeploymentsAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsedInDeploymentsAllOfWithDefaults() *UsedInDeploymentsAllOf {
	this := UsedInDeploymentsAllOf{}
	return &this
}

// GetInboundCount returns the InboundCount field value if set, zero value otherwise.
func (o *UsedInDeploymentsAllOf) GetInboundCount() int32 {
	if o == nil || o.InboundCount == nil {
		var ret int32
		return ret
	}
	return *o.InboundCount
}

// GetInboundCountOk returns a tuple with the InboundCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsedInDeploymentsAllOf) GetInboundCountOk() (*int32, bool) {
	if o == nil || o.InboundCount == nil {
		return nil, false
	}
	return o.InboundCount, true
}

// HasInboundCount returns a boolean if a field has been set.
func (o *UsedInDeploymentsAllOf) HasInboundCount() bool {
	if o != nil && o.InboundCount != nil {
		return true
	}

	return false
}

// SetInboundCount gets a reference to the given int32 and assigns it to the InboundCount field.
func (o *UsedInDeploymentsAllOf) SetInboundCount(v int32) {
	o.InboundCount = &v
}

// GetOutboundCount returns the OutboundCount field value if set, zero value otherwise.
func (o *UsedInDeploymentsAllOf) GetOutboundCount() int32 {
	if o == nil || o.OutboundCount == nil {
		var ret int32
		return ret
	}
	return *o.OutboundCount
}

// GetOutboundCountOk returns a tuple with the OutboundCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsedInDeploymentsAllOf) GetOutboundCountOk() (*int32, bool) {
	if o == nil || o.OutboundCount == nil {
		return nil, false
	}
	return o.OutboundCount, true
}

// HasOutboundCount returns a boolean if a field has been set.
func (o *UsedInDeploymentsAllOf) HasOutboundCount() bool {
	if o != nil && o.OutboundCount != nil {
		return true
	}

	return false
}

// SetOutboundCount gets a reference to the given int32 and assigns it to the OutboundCount field.
func (o *UsedInDeploymentsAllOf) SetOutboundCount(v int32) {
	o.OutboundCount = &v
}

func (o UsedInDeploymentsAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.InboundCount != nil {
		toSerialize["inboundCount"] = o.InboundCount
	}
	if o.OutboundCount != nil {
		toSerialize["outboundCount"] = o.OutboundCount
	}
	return json.Marshal(toSerialize)
}

type NullableUsedInDeploymentsAllOf struct {
	value *UsedInDeploymentsAllOf
	isSet bool
}

func (v NullableUsedInDeploymentsAllOf) Get() *UsedInDeploymentsAllOf {
	return v.value
}

func (v *NullableUsedInDeploymentsAllOf) Set(val *UsedInDeploymentsAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableUsedInDeploymentsAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableUsedInDeploymentsAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsedInDeploymentsAllOf(val *UsedInDeploymentsAllOf) *NullableUsedInDeploymentsAllOf {
	return &NullableUsedInDeploymentsAllOf{value: val, isSet: true}
}

func (v NullableUsedInDeploymentsAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsedInDeploymentsAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


