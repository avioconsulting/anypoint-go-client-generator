/*
 * Partner Manager Partners API
 *
 * Anypoint Partner Manager - Partners API
 *
 * API version: v1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apm

import (
	"encoding/json"
)

// Document struct for Document
type Document struct {
	Id *string `json:"id,omitempty"`
	DocumentFlowDirection string `json:"documentFlowDirection"`
	DocumentTypeRole string `json:"documentTypeRole"`
	EdiDocumentTypeId string `json:"ediDocumentTypeId"`
	IsStandard bool `json:"isStandard"`
	Name string `json:"name"`
	MessageDataScript *string `json:"messageDataScript,omitempty"`
	DocumentTypeParameters *string `json:"documentTypeParameters,omitempty"`
}

// NewDocument instantiates a new Document object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocument(documentFlowDirection string, documentTypeRole string, ediDocumentTypeId string, isStandard bool, name string) *Document {
	this := Document{}
	this.DocumentFlowDirection = documentFlowDirection
	this.DocumentTypeRole = documentTypeRole
	this.EdiDocumentTypeId = ediDocumentTypeId
	this.IsStandard = isStandard
	this.Name = name
	return &this
}

// NewDocumentWithDefaults instantiates a new Document object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentWithDefaults() *Document {
	this := Document{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Document) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Document) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Document) SetId(v string) {
	o.Id = &v
}

// GetDocumentFlowDirection returns the DocumentFlowDirection field value
func (o *Document) GetDocumentFlowDirection() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DocumentFlowDirection
}

// GetDocumentFlowDirectionOk returns a tuple with the DocumentFlowDirection field value
// and a boolean to check if the value has been set.
func (o *Document) GetDocumentFlowDirectionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DocumentFlowDirection, true
}

// SetDocumentFlowDirection sets field value
func (o *Document) SetDocumentFlowDirection(v string) {
	o.DocumentFlowDirection = v
}

// GetDocumentTypeRole returns the DocumentTypeRole field value
func (o *Document) GetDocumentTypeRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DocumentTypeRole
}

// GetDocumentTypeRoleOk returns a tuple with the DocumentTypeRole field value
// and a boolean to check if the value has been set.
func (o *Document) GetDocumentTypeRoleOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DocumentTypeRole, true
}

// SetDocumentTypeRole sets field value
func (o *Document) SetDocumentTypeRole(v string) {
	o.DocumentTypeRole = v
}

// GetEdiDocumentTypeId returns the EdiDocumentTypeId field value
func (o *Document) GetEdiDocumentTypeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EdiDocumentTypeId
}

// GetEdiDocumentTypeIdOk returns a tuple with the EdiDocumentTypeId field value
// and a boolean to check if the value has been set.
func (o *Document) GetEdiDocumentTypeIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EdiDocumentTypeId, true
}

// SetEdiDocumentTypeId sets field value
func (o *Document) SetEdiDocumentTypeId(v string) {
	o.EdiDocumentTypeId = v
}

// GetIsStandard returns the IsStandard field value
func (o *Document) GetIsStandard() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsStandard
}

// GetIsStandardOk returns a tuple with the IsStandard field value
// and a boolean to check if the value has been set.
func (o *Document) GetIsStandardOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IsStandard, true
}

// SetIsStandard sets field value
func (o *Document) SetIsStandard(v bool) {
	o.IsStandard = v
}

// GetName returns the Name field value
func (o *Document) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Document) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Document) SetName(v string) {
	o.Name = v
}

// GetMessageDataScript returns the MessageDataScript field value if set, zero value otherwise.
func (o *Document) GetMessageDataScript() string {
	if o == nil || o.MessageDataScript == nil {
		var ret string
		return ret
	}
	return *o.MessageDataScript
}

// GetMessageDataScriptOk returns a tuple with the MessageDataScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetMessageDataScriptOk() (*string, bool) {
	if o == nil || o.MessageDataScript == nil {
		return nil, false
	}
	return o.MessageDataScript, true
}

// HasMessageDataScript returns a boolean if a field has been set.
func (o *Document) HasMessageDataScript() bool {
	if o != nil && o.MessageDataScript != nil {
		return true
	}

	return false
}

// SetMessageDataScript gets a reference to the given string and assigns it to the MessageDataScript field.
func (o *Document) SetMessageDataScript(v string) {
	o.MessageDataScript = &v
}

// GetDocumentTypeParameters returns the DocumentTypeParameters field value if set, zero value otherwise.
func (o *Document) GetDocumentTypeParameters() string {
	if o == nil || o.DocumentTypeParameters == nil {
		var ret string
		return ret
	}
	return *o.DocumentTypeParameters
}

// GetDocumentTypeParametersOk returns a tuple with the DocumentTypeParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetDocumentTypeParametersOk() (*string, bool) {
	if o == nil || o.DocumentTypeParameters == nil {
		return nil, false
	}
	return o.DocumentTypeParameters, true
}

// HasDocumentTypeParameters returns a boolean if a field has been set.
func (o *Document) HasDocumentTypeParameters() bool {
	if o != nil && o.DocumentTypeParameters != nil {
		return true
	}

	return false
}

// SetDocumentTypeParameters gets a reference to the given string and assigns it to the DocumentTypeParameters field.
func (o *Document) SetDocumentTypeParameters(v string) {
	o.DocumentTypeParameters = &v
}

func (o Document) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["documentFlowDirection"] = o.DocumentFlowDirection
	}
	if true {
		toSerialize["documentTypeRole"] = o.DocumentTypeRole
	}
	if true {
		toSerialize["ediDocumentTypeId"] = o.EdiDocumentTypeId
	}
	if true {
		toSerialize["isStandard"] = o.IsStandard
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.MessageDataScript != nil {
		toSerialize["messageDataScript"] = o.MessageDataScript
	}
	if o.DocumentTypeParameters != nil {
		toSerialize["documentTypeParameters"] = o.DocumentTypeParameters
	}
	return json.Marshal(toSerialize)
}

type NullableDocument struct {
	value *Document
	isSet bool
}

func (v NullableDocument) Get() *Document {
	return v.value
}

func (v *NullableDocument) Set(val *Document) {
	v.value = val
	v.isSet = true
}

func (v NullableDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocument(val *Document) *NullableDocument {
	return &NullableDocument{value: val, isSet: true}
}

func (v NullableDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


