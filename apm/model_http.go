/*
 * Partner Manager Partners API
 *
 * Anypoint Partner Manager - Partners API
 *
 * API version: v1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apm

import (
	"encoding/json"
)

// Http HTTP(S) Endpoint
type Http struct {
	BaseEndpoint
	Config HttpConfig `json:"config"`
}

// NewHttp instantiates a new Http object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHttp(name string, description string, environmentId string, endpointTypeId string, endpointRole EndpointRoleType, config HttpConfig) *Http {
	this := Http{}
	this.Name = name
	this.Description = description
	this.EnvironmentId = environmentId
	this.EndpointTypeId = endpointTypeId
	this.EndpointRole = endpointRole
	this.Config = config
	return &this
}

// NewHttpWithDefaults instantiates a new Http object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHttpWithDefaults() *Http {
	this := Http{}
	return &this
}

// GetConfig returns the Config field value
func (o *Http) GetConfig() HttpConfig {
	if o == nil {
		var ret HttpConfig
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *Http) GetConfigOk() (*HttpConfig, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *Http) SetConfig(v HttpConfig) {
	o.Config = v
}

func (o Http) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBaseEndpoint, errBaseEndpoint := json.Marshal(o.BaseEndpoint)
	if errBaseEndpoint != nil {
		return []byte{}, errBaseEndpoint
	}
	errBaseEndpoint = json.Unmarshal([]byte(serializedBaseEndpoint), &toSerialize)
	if errBaseEndpoint != nil {
		return []byte{}, errBaseEndpoint
	}
	if true {
		toSerialize["config"] = o.Config
	}
	return json.Marshal(toSerialize)
}

type NullableHttp struct {
	value *Http
	isSet bool
}

func (v NullableHttp) Get() *Http {
	return v.value
}

func (v *NullableHttp) Set(val *Http) {
	v.value = val
	v.isSet = true
}

func (v NullableHttp) IsSet() bool {
	return v.isSet
}

func (v *NullableHttp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttp(val *Http) *NullableHttp {
	return &NullableHttp{value: val, isSet: true}
}

func (v NullableHttp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


