/*
 * Partner Manager Partners API
 *
 * Anypoint Partner Manager - Partners API
 *
 * API version: v1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apm

import (
	"encoding/json"
)

// EdiFormat struct for EdiFormat
type EdiFormat struct {
	Id *string `json:"id,omitempty"`
	FormatType *string `json:"formatType,omitempty"`
	Description string `json:"description"`
	Label string `json:"label"`
}

// NewEdiFormat instantiates a new EdiFormat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEdiFormat(description string, label string) *EdiFormat {
	this := EdiFormat{}
	this.Description = description
	this.Label = label
	return &this
}

// NewEdiFormatWithDefaults instantiates a new EdiFormat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEdiFormatWithDefaults() *EdiFormat {
	this := EdiFormat{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EdiFormat) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormat) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EdiFormat) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *EdiFormat) SetId(v string) {
	o.Id = &v
}

// GetFormatType returns the FormatType field value if set, zero value otherwise.
func (o *EdiFormat) GetFormatType() string {
	if o == nil || o.FormatType == nil {
		var ret string
		return ret
	}
	return *o.FormatType
}

// GetFormatTypeOk returns a tuple with the FormatType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormat) GetFormatTypeOk() (*string, bool) {
	if o == nil || o.FormatType == nil {
		return nil, false
	}
	return o.FormatType, true
}

// HasFormatType returns a boolean if a field has been set.
func (o *EdiFormat) HasFormatType() bool {
	if o != nil && o.FormatType != nil {
		return true
	}

	return false
}

// SetFormatType gets a reference to the given string and assigns it to the FormatType field.
func (o *EdiFormat) SetFormatType(v string) {
	o.FormatType = &v
}

// GetDescription returns the Description field value
func (o *EdiFormat) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *EdiFormat) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *EdiFormat) SetDescription(v string) {
	o.Description = v
}

// GetLabel returns the Label field value
func (o *EdiFormat) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *EdiFormat) GetLabelOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *EdiFormat) SetLabel(v string) {
	o.Label = v
}

func (o EdiFormat) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.FormatType != nil {
		toSerialize["formatType"] = o.FormatType
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["label"] = o.Label
	}
	return json.Marshal(toSerialize)
}

type NullableEdiFormat struct {
	value *EdiFormat
	isSet bool
}

func (v NullableEdiFormat) Get() *EdiFormat {
	return v.value
}

func (v *NullableEdiFormat) Set(val *EdiFormat) {
	v.value = val
	v.isSet = true
}

func (v NullableEdiFormat) IsSet() bool {
	return v.isSet
}

func (v *NullableEdiFormat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEdiFormat(val *EdiFormat) *NullableEdiFormat {
	return &NullableEdiFormat{value: val, isSet: true}
}

func (v NullableEdiFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEdiFormat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


