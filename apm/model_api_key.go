/*
 * Partner Manager Partners API
 *
 * Anypoint Partner Manager - Partners API
 *
 * API version: v1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apm

import (
	"encoding/json"
)

// ApiKey struct for ApiKey
type ApiKey struct {
	KeyId string `json:"keyId"`
	KeyValue string `json:"keyValue"`
}

// NewApiKey instantiates a new ApiKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiKey(keyId string, keyValue string) *ApiKey {
	this := ApiKey{}
	this.KeyId = keyId
	this.KeyValue = keyValue
	return &this
}

// NewApiKeyWithDefaults instantiates a new ApiKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiKeyWithDefaults() *ApiKey {
	this := ApiKey{}
	return &this
}

// GetKeyId returns the KeyId field value
func (o *ApiKey) GetKeyId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeyId
}

// GetKeyIdOk returns a tuple with the KeyId field value
// and a boolean to check if the value has been set.
func (o *ApiKey) GetKeyIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.KeyId, true
}

// SetKeyId sets field value
func (o *ApiKey) SetKeyId(v string) {
	o.KeyId = v
}

// GetKeyValue returns the KeyValue field value
func (o *ApiKey) GetKeyValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeyValue
}

// GetKeyValueOk returns a tuple with the KeyValue field value
// and a boolean to check if the value has been set.
func (o *ApiKey) GetKeyValueOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.KeyValue, true
}

// SetKeyValue sets field value
func (o *ApiKey) SetKeyValue(v string) {
	o.KeyValue = v
}

func (o ApiKey) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["keyId"] = o.KeyId
	}
	if true {
		toSerialize["keyValue"] = o.KeyValue
	}
	return json.Marshal(toSerialize)
}

type NullableApiKey struct {
	value *ApiKey
	isSet bool
}

func (v NullableApiKey) Get() *ApiKey {
	return v.value
}

func (v *NullableApiKey) Set(val *ApiKey) {
	v.value = val
	v.isSet = true
}

func (v NullableApiKey) IsSet() bool {
	return v.isSet
}

func (v *NullableApiKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiKey(val *ApiKey) *NullableApiKey {
	return &NullableApiKey{value: val, isSet: true}
}

func (v NullableApiKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


