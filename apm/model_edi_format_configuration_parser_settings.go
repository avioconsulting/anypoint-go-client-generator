/*
 * Partner Manager Partners API
 *
 * Anypoint Partner Manager - Partners API
 *
 * API version: v1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apm

import (
	"encoding/json"
)

// EdiFormatConfigurationParserSettings struct for EdiFormatConfigurationParserSettings
type EdiFormatConfigurationParserSettings struct {
	AckEndpointId *string `json:"ackEndpointId,omitempty"`
	CheckDuplicateDays *int32 `json:"checkDuplicateDays,omitempty"`
	FailDocumentWhenValueLengthOutsideAllowedRange *bool `json:"failDocumentWhenValueLengthOutsideAllowedRange,omitempty"`
	FailDocumentWhenInvalidCharacterInValue *bool `json:"failDocumentWhenInvalidCharacterInValue,omitempty"`
	FailDocumentIfValueIsRepeatedTooManyTimes *bool `json:"failDocumentIfValueIsRepeatedTooManyTimes,omitempty"`
	FailDocumentIfUnknownSegmentsAreUsed *bool `json:"failDocumentIfUnknownSegmentsAreUsed,omitempty"`
	FailDocumentWhenSegmentsAreOutOfOrder *bool `json:"failDocumentWhenSegmentsAreOutOfOrder,omitempty"`
	FailDocumentWhenTooManyRepeatsOfSegment *bool `json:"failDocumentWhenTooManyRepeatsOfSegment,omitempty"`
	FailDocumentWhenUnusedSegmentsAreIncluded *bool `json:"failDocumentWhenUnusedSegmentsAreIncluded,omitempty"`
	EnforceConditionalRulesOnParser *bool `json:"enforceConditionalRulesOnParser,omitempty"`
	EnforceCodeSetValidationsParse *bool `json:"enforceCodeSetValidationsParse,omitempty"`
	AcknowledgeEveryTransaction *bool `json:"acknowledgeEveryTransaction,omitempty"`
	GenerateTA1 *bool `json:"generateTA1,omitempty"`
	Generate999 *bool `json:"generate999,omitempty"`
	Require997 *bool `json:"require997,omitempty"`
}

// NewEdiFormatConfigurationParserSettings instantiates a new EdiFormatConfigurationParserSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEdiFormatConfigurationParserSettings() *EdiFormatConfigurationParserSettings {
	this := EdiFormatConfigurationParserSettings{}
	return &this
}

// NewEdiFormatConfigurationParserSettingsWithDefaults instantiates a new EdiFormatConfigurationParserSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEdiFormatConfigurationParserSettingsWithDefaults() *EdiFormatConfigurationParserSettings {
	this := EdiFormatConfigurationParserSettings{}
	return &this
}

// GetAckEndpointId returns the AckEndpointId field value if set, zero value otherwise.
func (o *EdiFormatConfigurationParserSettings) GetAckEndpointId() string {
	if o == nil || o.AckEndpointId == nil {
		var ret string
		return ret
	}
	return *o.AckEndpointId
}

// GetAckEndpointIdOk returns a tuple with the AckEndpointId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormatConfigurationParserSettings) GetAckEndpointIdOk() (*string, bool) {
	if o == nil || o.AckEndpointId == nil {
		return nil, false
	}
	return o.AckEndpointId, true
}

// HasAckEndpointId returns a boolean if a field has been set.
func (o *EdiFormatConfigurationParserSettings) HasAckEndpointId() bool {
	if o != nil && o.AckEndpointId != nil {
		return true
	}

	return false
}

// SetAckEndpointId gets a reference to the given string and assigns it to the AckEndpointId field.
func (o *EdiFormatConfigurationParserSettings) SetAckEndpointId(v string) {
	o.AckEndpointId = &v
}

// GetCheckDuplicateDays returns the CheckDuplicateDays field value if set, zero value otherwise.
func (o *EdiFormatConfigurationParserSettings) GetCheckDuplicateDays() int32 {
	if o == nil || o.CheckDuplicateDays == nil {
		var ret int32
		return ret
	}
	return *o.CheckDuplicateDays
}

// GetCheckDuplicateDaysOk returns a tuple with the CheckDuplicateDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormatConfigurationParserSettings) GetCheckDuplicateDaysOk() (*int32, bool) {
	if o == nil || o.CheckDuplicateDays == nil {
		return nil, false
	}
	return o.CheckDuplicateDays, true
}

// HasCheckDuplicateDays returns a boolean if a field has been set.
func (o *EdiFormatConfigurationParserSettings) HasCheckDuplicateDays() bool {
	if o != nil && o.CheckDuplicateDays != nil {
		return true
	}

	return false
}

// SetCheckDuplicateDays gets a reference to the given int32 and assigns it to the CheckDuplicateDays field.
func (o *EdiFormatConfigurationParserSettings) SetCheckDuplicateDays(v int32) {
	o.CheckDuplicateDays = &v
}

// GetFailDocumentWhenValueLengthOutsideAllowedRange returns the FailDocumentWhenValueLengthOutsideAllowedRange field value if set, zero value otherwise.
func (o *EdiFormatConfigurationParserSettings) GetFailDocumentWhenValueLengthOutsideAllowedRange() bool {
	if o == nil || o.FailDocumentWhenValueLengthOutsideAllowedRange == nil {
		var ret bool
		return ret
	}
	return *o.FailDocumentWhenValueLengthOutsideAllowedRange
}

// GetFailDocumentWhenValueLengthOutsideAllowedRangeOk returns a tuple with the FailDocumentWhenValueLengthOutsideAllowedRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormatConfigurationParserSettings) GetFailDocumentWhenValueLengthOutsideAllowedRangeOk() (*bool, bool) {
	if o == nil || o.FailDocumentWhenValueLengthOutsideAllowedRange == nil {
		return nil, false
	}
	return o.FailDocumentWhenValueLengthOutsideAllowedRange, true
}

// HasFailDocumentWhenValueLengthOutsideAllowedRange returns a boolean if a field has been set.
func (o *EdiFormatConfigurationParserSettings) HasFailDocumentWhenValueLengthOutsideAllowedRange() bool {
	if o != nil && o.FailDocumentWhenValueLengthOutsideAllowedRange != nil {
		return true
	}

	return false
}

// SetFailDocumentWhenValueLengthOutsideAllowedRange gets a reference to the given bool and assigns it to the FailDocumentWhenValueLengthOutsideAllowedRange field.
func (o *EdiFormatConfigurationParserSettings) SetFailDocumentWhenValueLengthOutsideAllowedRange(v bool) {
	o.FailDocumentWhenValueLengthOutsideAllowedRange = &v
}

// GetFailDocumentWhenInvalidCharacterInValue returns the FailDocumentWhenInvalidCharacterInValue field value if set, zero value otherwise.
func (o *EdiFormatConfigurationParserSettings) GetFailDocumentWhenInvalidCharacterInValue() bool {
	if o == nil || o.FailDocumentWhenInvalidCharacterInValue == nil {
		var ret bool
		return ret
	}
	return *o.FailDocumentWhenInvalidCharacterInValue
}

// GetFailDocumentWhenInvalidCharacterInValueOk returns a tuple with the FailDocumentWhenInvalidCharacterInValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormatConfigurationParserSettings) GetFailDocumentWhenInvalidCharacterInValueOk() (*bool, bool) {
	if o == nil || o.FailDocumentWhenInvalidCharacterInValue == nil {
		return nil, false
	}
	return o.FailDocumentWhenInvalidCharacterInValue, true
}

// HasFailDocumentWhenInvalidCharacterInValue returns a boolean if a field has been set.
func (o *EdiFormatConfigurationParserSettings) HasFailDocumentWhenInvalidCharacterInValue() bool {
	if o != nil && o.FailDocumentWhenInvalidCharacterInValue != nil {
		return true
	}

	return false
}

// SetFailDocumentWhenInvalidCharacterInValue gets a reference to the given bool and assigns it to the FailDocumentWhenInvalidCharacterInValue field.
func (o *EdiFormatConfigurationParserSettings) SetFailDocumentWhenInvalidCharacterInValue(v bool) {
	o.FailDocumentWhenInvalidCharacterInValue = &v
}

// GetFailDocumentIfValueIsRepeatedTooManyTimes returns the FailDocumentIfValueIsRepeatedTooManyTimes field value if set, zero value otherwise.
func (o *EdiFormatConfigurationParserSettings) GetFailDocumentIfValueIsRepeatedTooManyTimes() bool {
	if o == nil || o.FailDocumentIfValueIsRepeatedTooManyTimes == nil {
		var ret bool
		return ret
	}
	return *o.FailDocumentIfValueIsRepeatedTooManyTimes
}

// GetFailDocumentIfValueIsRepeatedTooManyTimesOk returns a tuple with the FailDocumentIfValueIsRepeatedTooManyTimes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormatConfigurationParserSettings) GetFailDocumentIfValueIsRepeatedTooManyTimesOk() (*bool, bool) {
	if o == nil || o.FailDocumentIfValueIsRepeatedTooManyTimes == nil {
		return nil, false
	}
	return o.FailDocumentIfValueIsRepeatedTooManyTimes, true
}

// HasFailDocumentIfValueIsRepeatedTooManyTimes returns a boolean if a field has been set.
func (o *EdiFormatConfigurationParserSettings) HasFailDocumentIfValueIsRepeatedTooManyTimes() bool {
	if o != nil && o.FailDocumentIfValueIsRepeatedTooManyTimes != nil {
		return true
	}

	return false
}

// SetFailDocumentIfValueIsRepeatedTooManyTimes gets a reference to the given bool and assigns it to the FailDocumentIfValueIsRepeatedTooManyTimes field.
func (o *EdiFormatConfigurationParserSettings) SetFailDocumentIfValueIsRepeatedTooManyTimes(v bool) {
	o.FailDocumentIfValueIsRepeatedTooManyTimes = &v
}

// GetFailDocumentIfUnknownSegmentsAreUsed returns the FailDocumentIfUnknownSegmentsAreUsed field value if set, zero value otherwise.
func (o *EdiFormatConfigurationParserSettings) GetFailDocumentIfUnknownSegmentsAreUsed() bool {
	if o == nil || o.FailDocumentIfUnknownSegmentsAreUsed == nil {
		var ret bool
		return ret
	}
	return *o.FailDocumentIfUnknownSegmentsAreUsed
}

// GetFailDocumentIfUnknownSegmentsAreUsedOk returns a tuple with the FailDocumentIfUnknownSegmentsAreUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormatConfigurationParserSettings) GetFailDocumentIfUnknownSegmentsAreUsedOk() (*bool, bool) {
	if o == nil || o.FailDocumentIfUnknownSegmentsAreUsed == nil {
		return nil, false
	}
	return o.FailDocumentIfUnknownSegmentsAreUsed, true
}

// HasFailDocumentIfUnknownSegmentsAreUsed returns a boolean if a field has been set.
func (o *EdiFormatConfigurationParserSettings) HasFailDocumentIfUnknownSegmentsAreUsed() bool {
	if o != nil && o.FailDocumentIfUnknownSegmentsAreUsed != nil {
		return true
	}

	return false
}

// SetFailDocumentIfUnknownSegmentsAreUsed gets a reference to the given bool and assigns it to the FailDocumentIfUnknownSegmentsAreUsed field.
func (o *EdiFormatConfigurationParserSettings) SetFailDocumentIfUnknownSegmentsAreUsed(v bool) {
	o.FailDocumentIfUnknownSegmentsAreUsed = &v
}

// GetFailDocumentWhenSegmentsAreOutOfOrder returns the FailDocumentWhenSegmentsAreOutOfOrder field value if set, zero value otherwise.
func (o *EdiFormatConfigurationParserSettings) GetFailDocumentWhenSegmentsAreOutOfOrder() bool {
	if o == nil || o.FailDocumentWhenSegmentsAreOutOfOrder == nil {
		var ret bool
		return ret
	}
	return *o.FailDocumentWhenSegmentsAreOutOfOrder
}

// GetFailDocumentWhenSegmentsAreOutOfOrderOk returns a tuple with the FailDocumentWhenSegmentsAreOutOfOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormatConfigurationParserSettings) GetFailDocumentWhenSegmentsAreOutOfOrderOk() (*bool, bool) {
	if o == nil || o.FailDocumentWhenSegmentsAreOutOfOrder == nil {
		return nil, false
	}
	return o.FailDocumentWhenSegmentsAreOutOfOrder, true
}

// HasFailDocumentWhenSegmentsAreOutOfOrder returns a boolean if a field has been set.
func (o *EdiFormatConfigurationParserSettings) HasFailDocumentWhenSegmentsAreOutOfOrder() bool {
	if o != nil && o.FailDocumentWhenSegmentsAreOutOfOrder != nil {
		return true
	}

	return false
}

// SetFailDocumentWhenSegmentsAreOutOfOrder gets a reference to the given bool and assigns it to the FailDocumentWhenSegmentsAreOutOfOrder field.
func (o *EdiFormatConfigurationParserSettings) SetFailDocumentWhenSegmentsAreOutOfOrder(v bool) {
	o.FailDocumentWhenSegmentsAreOutOfOrder = &v
}

// GetFailDocumentWhenTooManyRepeatsOfSegment returns the FailDocumentWhenTooManyRepeatsOfSegment field value if set, zero value otherwise.
func (o *EdiFormatConfigurationParserSettings) GetFailDocumentWhenTooManyRepeatsOfSegment() bool {
	if o == nil || o.FailDocumentWhenTooManyRepeatsOfSegment == nil {
		var ret bool
		return ret
	}
	return *o.FailDocumentWhenTooManyRepeatsOfSegment
}

// GetFailDocumentWhenTooManyRepeatsOfSegmentOk returns a tuple with the FailDocumentWhenTooManyRepeatsOfSegment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormatConfigurationParserSettings) GetFailDocumentWhenTooManyRepeatsOfSegmentOk() (*bool, bool) {
	if o == nil || o.FailDocumentWhenTooManyRepeatsOfSegment == nil {
		return nil, false
	}
	return o.FailDocumentWhenTooManyRepeatsOfSegment, true
}

// HasFailDocumentWhenTooManyRepeatsOfSegment returns a boolean if a field has been set.
func (o *EdiFormatConfigurationParserSettings) HasFailDocumentWhenTooManyRepeatsOfSegment() bool {
	if o != nil && o.FailDocumentWhenTooManyRepeatsOfSegment != nil {
		return true
	}

	return false
}

// SetFailDocumentWhenTooManyRepeatsOfSegment gets a reference to the given bool and assigns it to the FailDocumentWhenTooManyRepeatsOfSegment field.
func (o *EdiFormatConfigurationParserSettings) SetFailDocumentWhenTooManyRepeatsOfSegment(v bool) {
	o.FailDocumentWhenTooManyRepeatsOfSegment = &v
}

// GetFailDocumentWhenUnusedSegmentsAreIncluded returns the FailDocumentWhenUnusedSegmentsAreIncluded field value if set, zero value otherwise.
func (o *EdiFormatConfigurationParserSettings) GetFailDocumentWhenUnusedSegmentsAreIncluded() bool {
	if o == nil || o.FailDocumentWhenUnusedSegmentsAreIncluded == nil {
		var ret bool
		return ret
	}
	return *o.FailDocumentWhenUnusedSegmentsAreIncluded
}

// GetFailDocumentWhenUnusedSegmentsAreIncludedOk returns a tuple with the FailDocumentWhenUnusedSegmentsAreIncluded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormatConfigurationParserSettings) GetFailDocumentWhenUnusedSegmentsAreIncludedOk() (*bool, bool) {
	if o == nil || o.FailDocumentWhenUnusedSegmentsAreIncluded == nil {
		return nil, false
	}
	return o.FailDocumentWhenUnusedSegmentsAreIncluded, true
}

// HasFailDocumentWhenUnusedSegmentsAreIncluded returns a boolean if a field has been set.
func (o *EdiFormatConfigurationParserSettings) HasFailDocumentWhenUnusedSegmentsAreIncluded() bool {
	if o != nil && o.FailDocumentWhenUnusedSegmentsAreIncluded != nil {
		return true
	}

	return false
}

// SetFailDocumentWhenUnusedSegmentsAreIncluded gets a reference to the given bool and assigns it to the FailDocumentWhenUnusedSegmentsAreIncluded field.
func (o *EdiFormatConfigurationParserSettings) SetFailDocumentWhenUnusedSegmentsAreIncluded(v bool) {
	o.FailDocumentWhenUnusedSegmentsAreIncluded = &v
}

// GetEnforceConditionalRulesOnParser returns the EnforceConditionalRulesOnParser field value if set, zero value otherwise.
func (o *EdiFormatConfigurationParserSettings) GetEnforceConditionalRulesOnParser() bool {
	if o == nil || o.EnforceConditionalRulesOnParser == nil {
		var ret bool
		return ret
	}
	return *o.EnforceConditionalRulesOnParser
}

// GetEnforceConditionalRulesOnParserOk returns a tuple with the EnforceConditionalRulesOnParser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormatConfigurationParserSettings) GetEnforceConditionalRulesOnParserOk() (*bool, bool) {
	if o == nil || o.EnforceConditionalRulesOnParser == nil {
		return nil, false
	}
	return o.EnforceConditionalRulesOnParser, true
}

// HasEnforceConditionalRulesOnParser returns a boolean if a field has been set.
func (o *EdiFormatConfigurationParserSettings) HasEnforceConditionalRulesOnParser() bool {
	if o != nil && o.EnforceConditionalRulesOnParser != nil {
		return true
	}

	return false
}

// SetEnforceConditionalRulesOnParser gets a reference to the given bool and assigns it to the EnforceConditionalRulesOnParser field.
func (o *EdiFormatConfigurationParserSettings) SetEnforceConditionalRulesOnParser(v bool) {
	o.EnforceConditionalRulesOnParser = &v
}

// GetEnforceCodeSetValidationsParse returns the EnforceCodeSetValidationsParse field value if set, zero value otherwise.
func (o *EdiFormatConfigurationParserSettings) GetEnforceCodeSetValidationsParse() bool {
	if o == nil || o.EnforceCodeSetValidationsParse == nil {
		var ret bool
		return ret
	}
	return *o.EnforceCodeSetValidationsParse
}

// GetEnforceCodeSetValidationsParseOk returns a tuple with the EnforceCodeSetValidationsParse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormatConfigurationParserSettings) GetEnforceCodeSetValidationsParseOk() (*bool, bool) {
	if o == nil || o.EnforceCodeSetValidationsParse == nil {
		return nil, false
	}
	return o.EnforceCodeSetValidationsParse, true
}

// HasEnforceCodeSetValidationsParse returns a boolean if a field has been set.
func (o *EdiFormatConfigurationParserSettings) HasEnforceCodeSetValidationsParse() bool {
	if o != nil && o.EnforceCodeSetValidationsParse != nil {
		return true
	}

	return false
}

// SetEnforceCodeSetValidationsParse gets a reference to the given bool and assigns it to the EnforceCodeSetValidationsParse field.
func (o *EdiFormatConfigurationParserSettings) SetEnforceCodeSetValidationsParse(v bool) {
	o.EnforceCodeSetValidationsParse = &v
}

// GetAcknowledgeEveryTransaction returns the AcknowledgeEveryTransaction field value if set, zero value otherwise.
func (o *EdiFormatConfigurationParserSettings) GetAcknowledgeEveryTransaction() bool {
	if o == nil || o.AcknowledgeEveryTransaction == nil {
		var ret bool
		return ret
	}
	return *o.AcknowledgeEveryTransaction
}

// GetAcknowledgeEveryTransactionOk returns a tuple with the AcknowledgeEveryTransaction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormatConfigurationParserSettings) GetAcknowledgeEveryTransactionOk() (*bool, bool) {
	if o == nil || o.AcknowledgeEveryTransaction == nil {
		return nil, false
	}
	return o.AcknowledgeEveryTransaction, true
}

// HasAcknowledgeEveryTransaction returns a boolean if a field has been set.
func (o *EdiFormatConfigurationParserSettings) HasAcknowledgeEveryTransaction() bool {
	if o != nil && o.AcknowledgeEveryTransaction != nil {
		return true
	}

	return false
}

// SetAcknowledgeEveryTransaction gets a reference to the given bool and assigns it to the AcknowledgeEveryTransaction field.
func (o *EdiFormatConfigurationParserSettings) SetAcknowledgeEveryTransaction(v bool) {
	o.AcknowledgeEveryTransaction = &v
}

// GetGenerateTA1 returns the GenerateTA1 field value if set, zero value otherwise.
func (o *EdiFormatConfigurationParserSettings) GetGenerateTA1() bool {
	if o == nil || o.GenerateTA1 == nil {
		var ret bool
		return ret
	}
	return *o.GenerateTA1
}

// GetGenerateTA1Ok returns a tuple with the GenerateTA1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormatConfigurationParserSettings) GetGenerateTA1Ok() (*bool, bool) {
	if o == nil || o.GenerateTA1 == nil {
		return nil, false
	}
	return o.GenerateTA1, true
}

// HasGenerateTA1 returns a boolean if a field has been set.
func (o *EdiFormatConfigurationParserSettings) HasGenerateTA1() bool {
	if o != nil && o.GenerateTA1 != nil {
		return true
	}

	return false
}

// SetGenerateTA1 gets a reference to the given bool and assigns it to the GenerateTA1 field.
func (o *EdiFormatConfigurationParserSettings) SetGenerateTA1(v bool) {
	o.GenerateTA1 = &v
}

// GetGenerate999 returns the Generate999 field value if set, zero value otherwise.
func (o *EdiFormatConfigurationParserSettings) GetGenerate999() bool {
	if o == nil || o.Generate999 == nil {
		var ret bool
		return ret
	}
	return *o.Generate999
}

// GetGenerate999Ok returns a tuple with the Generate999 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormatConfigurationParserSettings) GetGenerate999Ok() (*bool, bool) {
	if o == nil || o.Generate999 == nil {
		return nil, false
	}
	return o.Generate999, true
}

// HasGenerate999 returns a boolean if a field has been set.
func (o *EdiFormatConfigurationParserSettings) HasGenerate999() bool {
	if o != nil && o.Generate999 != nil {
		return true
	}

	return false
}

// SetGenerate999 gets a reference to the given bool and assigns it to the Generate999 field.
func (o *EdiFormatConfigurationParserSettings) SetGenerate999(v bool) {
	o.Generate999 = &v
}

// GetRequire997 returns the Require997 field value if set, zero value otherwise.
func (o *EdiFormatConfigurationParserSettings) GetRequire997() bool {
	if o == nil || o.Require997 == nil {
		var ret bool
		return ret
	}
	return *o.Require997
}

// GetRequire997Ok returns a tuple with the Require997 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormatConfigurationParserSettings) GetRequire997Ok() (*bool, bool) {
	if o == nil || o.Require997 == nil {
		return nil, false
	}
	return o.Require997, true
}

// HasRequire997 returns a boolean if a field has been set.
func (o *EdiFormatConfigurationParserSettings) HasRequire997() bool {
	if o != nil && o.Require997 != nil {
		return true
	}

	return false
}

// SetRequire997 gets a reference to the given bool and assigns it to the Require997 field.
func (o *EdiFormatConfigurationParserSettings) SetRequire997(v bool) {
	o.Require997 = &v
}

func (o EdiFormatConfigurationParserSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AckEndpointId != nil {
		toSerialize["ackEndpointId"] = o.AckEndpointId
	}
	if o.CheckDuplicateDays != nil {
		toSerialize["checkDuplicateDays"] = o.CheckDuplicateDays
	}
	if o.FailDocumentWhenValueLengthOutsideAllowedRange != nil {
		toSerialize["failDocumentWhenValueLengthOutsideAllowedRange"] = o.FailDocumentWhenValueLengthOutsideAllowedRange
	}
	if o.FailDocumentWhenInvalidCharacterInValue != nil {
		toSerialize["failDocumentWhenInvalidCharacterInValue"] = o.FailDocumentWhenInvalidCharacterInValue
	}
	if o.FailDocumentIfValueIsRepeatedTooManyTimes != nil {
		toSerialize["failDocumentIfValueIsRepeatedTooManyTimes"] = o.FailDocumentIfValueIsRepeatedTooManyTimes
	}
	if o.FailDocumentIfUnknownSegmentsAreUsed != nil {
		toSerialize["failDocumentIfUnknownSegmentsAreUsed"] = o.FailDocumentIfUnknownSegmentsAreUsed
	}
	if o.FailDocumentWhenSegmentsAreOutOfOrder != nil {
		toSerialize["failDocumentWhenSegmentsAreOutOfOrder"] = o.FailDocumentWhenSegmentsAreOutOfOrder
	}
	if o.FailDocumentWhenTooManyRepeatsOfSegment != nil {
		toSerialize["failDocumentWhenTooManyRepeatsOfSegment"] = o.FailDocumentWhenTooManyRepeatsOfSegment
	}
	if o.FailDocumentWhenUnusedSegmentsAreIncluded != nil {
		toSerialize["failDocumentWhenUnusedSegmentsAreIncluded"] = o.FailDocumentWhenUnusedSegmentsAreIncluded
	}
	if o.EnforceConditionalRulesOnParser != nil {
		toSerialize["enforceConditionalRulesOnParser"] = o.EnforceConditionalRulesOnParser
	}
	if o.EnforceCodeSetValidationsParse != nil {
		toSerialize["enforceCodeSetValidationsParse"] = o.EnforceCodeSetValidationsParse
	}
	if o.AcknowledgeEveryTransaction != nil {
		toSerialize["acknowledgeEveryTransaction"] = o.AcknowledgeEveryTransaction
	}
	if o.GenerateTA1 != nil {
		toSerialize["generateTA1"] = o.GenerateTA1
	}
	if o.Generate999 != nil {
		toSerialize["generate999"] = o.Generate999
	}
	if o.Require997 != nil {
		toSerialize["require997"] = o.Require997
	}
	return json.Marshal(toSerialize)
}

type NullableEdiFormatConfigurationParserSettings struct {
	value *EdiFormatConfigurationParserSettings
	isSet bool
}

func (v NullableEdiFormatConfigurationParserSettings) Get() *EdiFormatConfigurationParserSettings {
	return v.value
}

func (v *NullableEdiFormatConfigurationParserSettings) Set(val *EdiFormatConfigurationParserSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableEdiFormatConfigurationParserSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableEdiFormatConfigurationParserSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEdiFormatConfigurationParserSettings(val *EdiFormatConfigurationParserSettings) *NullableEdiFormatConfigurationParserSettings {
	return &NullableEdiFormatConfigurationParserSettings{value: val, isSet: true}
}

func (v NullableEdiFormatConfigurationParserSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEdiFormatConfigurationParserSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


