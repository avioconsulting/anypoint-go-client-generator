/*
 * Partner Manager Partners API
 *
 * Anypoint Partner Manager - Partners API
 *
 * API version: v1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apm

import (
	"encoding/json"
)

// AuthModeBasic This can be used for HTTP Outbound authentication.
type AuthModeBasic struct {
	AuthModeBaseConfig
	Username *string `json:"username,omitempty"`
	Password *string `json:"password,omitempty"`
}

// NewAuthModeBasic instantiates a new AuthModeBasic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthModeBasic(authType string) *AuthModeBasic {
	this := AuthModeBasic{}
	this.AuthType = authType
	return &this
}

// NewAuthModeBasicWithDefaults instantiates a new AuthModeBasic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthModeBasicWithDefaults() *AuthModeBasic {
	this := AuthModeBasic{}
	return &this
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *AuthModeBasic) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthModeBasic) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *AuthModeBasic) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *AuthModeBasic) SetUsername(v string) {
	o.Username = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *AuthModeBasic) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthModeBasic) GetPasswordOk() (*string, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *AuthModeBasic) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *AuthModeBasic) SetPassword(v string) {
	o.Password = &v
}

func (o AuthModeBasic) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedAuthModeBaseConfig, errAuthModeBaseConfig := json.Marshal(o.AuthModeBaseConfig)
	if errAuthModeBaseConfig != nil {
		return []byte{}, errAuthModeBaseConfig
	}
	errAuthModeBaseConfig = json.Unmarshal([]byte(serializedAuthModeBaseConfig), &toSerialize)
	if errAuthModeBaseConfig != nil {
		return []byte{}, errAuthModeBaseConfig
	}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	if o.Password != nil {
		toSerialize["password"] = o.Password
	}
	return json.Marshal(toSerialize)
}

type NullableAuthModeBasic struct {
	value *AuthModeBasic
	isSet bool
}

func (v NullableAuthModeBasic) Get() *AuthModeBasic {
	return v.value
}

func (v *NullableAuthModeBasic) Set(val *AuthModeBasic) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthModeBasic) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthModeBasic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthModeBasic(val *AuthModeBasic) *NullableAuthModeBasic {
	return &NullableAuthModeBasic{value: val, isSet: true}
}

func (v NullableAuthModeBasic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthModeBasic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


