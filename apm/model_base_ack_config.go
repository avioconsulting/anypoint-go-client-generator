/*
 * Partner Manager Partners API
 *
 * Anypoint Partner Manager - Partners API
 *
 * API version: v1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apm

import (
	"encoding/json"
)

// BaseAckConfig This is used to enhance message flows with individual acknowledgement configs.
type BaseAckConfig struct {
	AckConfigType string `json:"ackConfigType"`
}

// NewBaseAckConfig instantiates a new BaseAckConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseAckConfig(ackConfigType string) *BaseAckConfig {
	this := BaseAckConfig{}
	this.AckConfigType = ackConfigType
	return &this
}

// NewBaseAckConfigWithDefaults instantiates a new BaseAckConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseAckConfigWithDefaults() *BaseAckConfig {
	this := BaseAckConfig{}
	return &this
}

// GetAckConfigType returns the AckConfigType field value
func (o *BaseAckConfig) GetAckConfigType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AckConfigType
}

// GetAckConfigTypeOk returns a tuple with the AckConfigType field value
// and a boolean to check if the value has been set.
func (o *BaseAckConfig) GetAckConfigTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AckConfigType, true
}

// SetAckConfigType sets field value
func (o *BaseAckConfig) SetAckConfigType(v string) {
	o.AckConfigType = v
}

func (o BaseAckConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ackConfigType"] = o.AckConfigType
	}
	return json.Marshal(toSerialize)
}

type NullableBaseAckConfig struct {
	value *BaseAckConfig
	isSet bool
}

func (v NullableBaseAckConfig) Get() *BaseAckConfig {
	return v.value
}

func (v *NullableBaseAckConfig) Set(val *BaseAckConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseAckConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseAckConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseAckConfig(val *BaseAckConfig) *NullableBaseAckConfig {
	return &NullableBaseAckConfig{value: val, isSet: true}
}

func (v NullableBaseAckConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseAckConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


