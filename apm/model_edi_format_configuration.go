/*
 * Partner Manager Partners API
 *
 * Anypoint Partner Manager - Partners API
 *
 * API version: v1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apm

import (
	"encoding/json"
)

// EdiFormatConfiguration struct for EdiFormatConfiguration
type EdiFormatConfiguration struct {
	Id *string `json:"id,omitempty"`
	ConfigType *string `json:"configType,omitempty"`
	FormatType *string `json:"formatType,omitempty"`
	FormatTypeId *string `json:"formatTypeId,omitempty"`
	PartnerId *string `json:"partnerId,omitempty"`
	AckEndpointId *string `json:"ackEndpointId,omitempty"`
	ConfigId *string `json:"configId,omitempty"`
	IsTemplate *bool `json:"isTemplate,omitempty"`
	CharacterSetAndDelimitersSettings *EdiFormatConfigurationCharacterSetAndDelimitersSettings `json:"characterSetAndDelimitersSettings,omitempty"`
	WriteSettings *EdiFormatConfigurationWriteSettings `json:"writeSettings,omitempty"`
	EdifactControlNumberSettings *EdiFormatConfigurationEdifactControlNumberSettings `json:"edifactControlNumberSettings,omitempty"`
	EdifactParserSettings *EdiFormatConfigurationEdifactParserSettings `json:"edifactParserSettings,omitempty"`
	Separators *EdiFormatConfigurationSeparators `json:"separators,omitempty"`
	AcknowledgementSettings *EdiFormatConfigurationAcknowledgementSettings `json:"acknowledgementSettings,omitempty"`
	WriterSettings *EdiFormatConfigurationWriterSettings `json:"writerSettings,omitempty"`
	CharacterSetEncoding *EdiFormatConfigurationCharacterSetEncoding `json:"characterSetEncoding,omitempty"`
	TerminatorDelimiter *EdiFormatConfigurationTerminatorDelimiter `json:"terminatorDelimiter,omitempty"`
	ControlNumberSettings *EdiFormatConfigurationControlNumberSettings `json:"controlNumberSettings,omitempty"`
	CharacterSetAndEncoding *EdiFormatConfigurationCharacterSetAndEncoding `json:"characterSetAndEncoding,omitempty"`
	ParserSettings *EdiFormatConfigurationParserSettings `json:"parserSettings,omitempty"`
	EnvelopeHeaders *EdiFormatConfigurationEnvelopeHeaders `json:"envelopeHeaders,omitempty"`
}

// NewEdiFormatConfiguration instantiates a new EdiFormatConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEdiFormatConfiguration() *EdiFormatConfiguration {
	this := EdiFormatConfiguration{}
	return &this
}

// NewEdiFormatConfigurationWithDefaults instantiates a new EdiFormatConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEdiFormatConfigurationWithDefaults() *EdiFormatConfiguration {
	this := EdiFormatConfiguration{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EdiFormatConfiguration) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormatConfiguration) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EdiFormatConfiguration) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *EdiFormatConfiguration) SetId(v string) {
	o.Id = &v
}

// GetConfigType returns the ConfigType field value if set, zero value otherwise.
func (o *EdiFormatConfiguration) GetConfigType() string {
	if o == nil || o.ConfigType == nil {
		var ret string
		return ret
	}
	return *o.ConfigType
}

// GetConfigTypeOk returns a tuple with the ConfigType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormatConfiguration) GetConfigTypeOk() (*string, bool) {
	if o == nil || o.ConfigType == nil {
		return nil, false
	}
	return o.ConfigType, true
}

// HasConfigType returns a boolean if a field has been set.
func (o *EdiFormatConfiguration) HasConfigType() bool {
	if o != nil && o.ConfigType != nil {
		return true
	}

	return false
}

// SetConfigType gets a reference to the given string and assigns it to the ConfigType field.
func (o *EdiFormatConfiguration) SetConfigType(v string) {
	o.ConfigType = &v
}

// GetFormatType returns the FormatType field value if set, zero value otherwise.
func (o *EdiFormatConfiguration) GetFormatType() string {
	if o == nil || o.FormatType == nil {
		var ret string
		return ret
	}
	return *o.FormatType
}

// GetFormatTypeOk returns a tuple with the FormatType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormatConfiguration) GetFormatTypeOk() (*string, bool) {
	if o == nil || o.FormatType == nil {
		return nil, false
	}
	return o.FormatType, true
}

// HasFormatType returns a boolean if a field has been set.
func (o *EdiFormatConfiguration) HasFormatType() bool {
	if o != nil && o.FormatType != nil {
		return true
	}

	return false
}

// SetFormatType gets a reference to the given string and assigns it to the FormatType field.
func (o *EdiFormatConfiguration) SetFormatType(v string) {
	o.FormatType = &v
}

// GetFormatTypeId returns the FormatTypeId field value if set, zero value otherwise.
func (o *EdiFormatConfiguration) GetFormatTypeId() string {
	if o == nil || o.FormatTypeId == nil {
		var ret string
		return ret
	}
	return *o.FormatTypeId
}

// GetFormatTypeIdOk returns a tuple with the FormatTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormatConfiguration) GetFormatTypeIdOk() (*string, bool) {
	if o == nil || o.FormatTypeId == nil {
		return nil, false
	}
	return o.FormatTypeId, true
}

// HasFormatTypeId returns a boolean if a field has been set.
func (o *EdiFormatConfiguration) HasFormatTypeId() bool {
	if o != nil && o.FormatTypeId != nil {
		return true
	}

	return false
}

// SetFormatTypeId gets a reference to the given string and assigns it to the FormatTypeId field.
func (o *EdiFormatConfiguration) SetFormatTypeId(v string) {
	o.FormatTypeId = &v
}

// GetPartnerId returns the PartnerId field value if set, zero value otherwise.
func (o *EdiFormatConfiguration) GetPartnerId() string {
	if o == nil || o.PartnerId == nil {
		var ret string
		return ret
	}
	return *o.PartnerId
}

// GetPartnerIdOk returns a tuple with the PartnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormatConfiguration) GetPartnerIdOk() (*string, bool) {
	if o == nil || o.PartnerId == nil {
		return nil, false
	}
	return o.PartnerId, true
}

// HasPartnerId returns a boolean if a field has been set.
func (o *EdiFormatConfiguration) HasPartnerId() bool {
	if o != nil && o.PartnerId != nil {
		return true
	}

	return false
}

// SetPartnerId gets a reference to the given string and assigns it to the PartnerId field.
func (o *EdiFormatConfiguration) SetPartnerId(v string) {
	o.PartnerId = &v
}

// GetAckEndpointId returns the AckEndpointId field value if set, zero value otherwise.
func (o *EdiFormatConfiguration) GetAckEndpointId() string {
	if o == nil || o.AckEndpointId == nil {
		var ret string
		return ret
	}
	return *o.AckEndpointId
}

// GetAckEndpointIdOk returns a tuple with the AckEndpointId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormatConfiguration) GetAckEndpointIdOk() (*string, bool) {
	if o == nil || o.AckEndpointId == nil {
		return nil, false
	}
	return o.AckEndpointId, true
}

// HasAckEndpointId returns a boolean if a field has been set.
func (o *EdiFormatConfiguration) HasAckEndpointId() bool {
	if o != nil && o.AckEndpointId != nil {
		return true
	}

	return false
}

// SetAckEndpointId gets a reference to the given string and assigns it to the AckEndpointId field.
func (o *EdiFormatConfiguration) SetAckEndpointId(v string) {
	o.AckEndpointId = &v
}

// GetConfigId returns the ConfigId field value if set, zero value otherwise.
func (o *EdiFormatConfiguration) GetConfigId() string {
	if o == nil || o.ConfigId == nil {
		var ret string
		return ret
	}
	return *o.ConfigId
}

// GetConfigIdOk returns a tuple with the ConfigId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormatConfiguration) GetConfigIdOk() (*string, bool) {
	if o == nil || o.ConfigId == nil {
		return nil, false
	}
	return o.ConfigId, true
}

// HasConfigId returns a boolean if a field has been set.
func (o *EdiFormatConfiguration) HasConfigId() bool {
	if o != nil && o.ConfigId != nil {
		return true
	}

	return false
}

// SetConfigId gets a reference to the given string and assigns it to the ConfigId field.
func (o *EdiFormatConfiguration) SetConfigId(v string) {
	o.ConfigId = &v
}

// GetIsTemplate returns the IsTemplate field value if set, zero value otherwise.
func (o *EdiFormatConfiguration) GetIsTemplate() bool {
	if o == nil || o.IsTemplate == nil {
		var ret bool
		return ret
	}
	return *o.IsTemplate
}

// GetIsTemplateOk returns a tuple with the IsTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormatConfiguration) GetIsTemplateOk() (*bool, bool) {
	if o == nil || o.IsTemplate == nil {
		return nil, false
	}
	return o.IsTemplate, true
}

// HasIsTemplate returns a boolean if a field has been set.
func (o *EdiFormatConfiguration) HasIsTemplate() bool {
	if o != nil && o.IsTemplate != nil {
		return true
	}

	return false
}

// SetIsTemplate gets a reference to the given bool and assigns it to the IsTemplate field.
func (o *EdiFormatConfiguration) SetIsTemplate(v bool) {
	o.IsTemplate = &v
}

// GetCharacterSetAndDelimitersSettings returns the CharacterSetAndDelimitersSettings field value if set, zero value otherwise.
func (o *EdiFormatConfiguration) GetCharacterSetAndDelimitersSettings() EdiFormatConfigurationCharacterSetAndDelimitersSettings {
	if o == nil || o.CharacterSetAndDelimitersSettings == nil {
		var ret EdiFormatConfigurationCharacterSetAndDelimitersSettings
		return ret
	}
	return *o.CharacterSetAndDelimitersSettings
}

// GetCharacterSetAndDelimitersSettingsOk returns a tuple with the CharacterSetAndDelimitersSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormatConfiguration) GetCharacterSetAndDelimitersSettingsOk() (*EdiFormatConfigurationCharacterSetAndDelimitersSettings, bool) {
	if o == nil || o.CharacterSetAndDelimitersSettings == nil {
		return nil, false
	}
	return o.CharacterSetAndDelimitersSettings, true
}

// HasCharacterSetAndDelimitersSettings returns a boolean if a field has been set.
func (o *EdiFormatConfiguration) HasCharacterSetAndDelimitersSettings() bool {
	if o != nil && o.CharacterSetAndDelimitersSettings != nil {
		return true
	}

	return false
}

// SetCharacterSetAndDelimitersSettings gets a reference to the given EdiFormatConfigurationCharacterSetAndDelimitersSettings and assigns it to the CharacterSetAndDelimitersSettings field.
func (o *EdiFormatConfiguration) SetCharacterSetAndDelimitersSettings(v EdiFormatConfigurationCharacterSetAndDelimitersSettings) {
	o.CharacterSetAndDelimitersSettings = &v
}

// GetWriteSettings returns the WriteSettings field value if set, zero value otherwise.
func (o *EdiFormatConfiguration) GetWriteSettings() EdiFormatConfigurationWriteSettings {
	if o == nil || o.WriteSettings == nil {
		var ret EdiFormatConfigurationWriteSettings
		return ret
	}
	return *o.WriteSettings
}

// GetWriteSettingsOk returns a tuple with the WriteSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormatConfiguration) GetWriteSettingsOk() (*EdiFormatConfigurationWriteSettings, bool) {
	if o == nil || o.WriteSettings == nil {
		return nil, false
	}
	return o.WriteSettings, true
}

// HasWriteSettings returns a boolean if a field has been set.
func (o *EdiFormatConfiguration) HasWriteSettings() bool {
	if o != nil && o.WriteSettings != nil {
		return true
	}

	return false
}

// SetWriteSettings gets a reference to the given EdiFormatConfigurationWriteSettings and assigns it to the WriteSettings field.
func (o *EdiFormatConfiguration) SetWriteSettings(v EdiFormatConfigurationWriteSettings) {
	o.WriteSettings = &v
}

// GetEdifactControlNumberSettings returns the EdifactControlNumberSettings field value if set, zero value otherwise.
func (o *EdiFormatConfiguration) GetEdifactControlNumberSettings() EdiFormatConfigurationEdifactControlNumberSettings {
	if o == nil || o.EdifactControlNumberSettings == nil {
		var ret EdiFormatConfigurationEdifactControlNumberSettings
		return ret
	}
	return *o.EdifactControlNumberSettings
}

// GetEdifactControlNumberSettingsOk returns a tuple with the EdifactControlNumberSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormatConfiguration) GetEdifactControlNumberSettingsOk() (*EdiFormatConfigurationEdifactControlNumberSettings, bool) {
	if o == nil || o.EdifactControlNumberSettings == nil {
		return nil, false
	}
	return o.EdifactControlNumberSettings, true
}

// HasEdifactControlNumberSettings returns a boolean if a field has been set.
func (o *EdiFormatConfiguration) HasEdifactControlNumberSettings() bool {
	if o != nil && o.EdifactControlNumberSettings != nil {
		return true
	}

	return false
}

// SetEdifactControlNumberSettings gets a reference to the given EdiFormatConfigurationEdifactControlNumberSettings and assigns it to the EdifactControlNumberSettings field.
func (o *EdiFormatConfiguration) SetEdifactControlNumberSettings(v EdiFormatConfigurationEdifactControlNumberSettings) {
	o.EdifactControlNumberSettings = &v
}

// GetEdifactParserSettings returns the EdifactParserSettings field value if set, zero value otherwise.
func (o *EdiFormatConfiguration) GetEdifactParserSettings() EdiFormatConfigurationEdifactParserSettings {
	if o == nil || o.EdifactParserSettings == nil {
		var ret EdiFormatConfigurationEdifactParserSettings
		return ret
	}
	return *o.EdifactParserSettings
}

// GetEdifactParserSettingsOk returns a tuple with the EdifactParserSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormatConfiguration) GetEdifactParserSettingsOk() (*EdiFormatConfigurationEdifactParserSettings, bool) {
	if o == nil || o.EdifactParserSettings == nil {
		return nil, false
	}
	return o.EdifactParserSettings, true
}

// HasEdifactParserSettings returns a boolean if a field has been set.
func (o *EdiFormatConfiguration) HasEdifactParserSettings() bool {
	if o != nil && o.EdifactParserSettings != nil {
		return true
	}

	return false
}

// SetEdifactParserSettings gets a reference to the given EdiFormatConfigurationEdifactParserSettings and assigns it to the EdifactParserSettings field.
func (o *EdiFormatConfiguration) SetEdifactParserSettings(v EdiFormatConfigurationEdifactParserSettings) {
	o.EdifactParserSettings = &v
}

// GetSeparators returns the Separators field value if set, zero value otherwise.
func (o *EdiFormatConfiguration) GetSeparators() EdiFormatConfigurationSeparators {
	if o == nil || o.Separators == nil {
		var ret EdiFormatConfigurationSeparators
		return ret
	}
	return *o.Separators
}

// GetSeparatorsOk returns a tuple with the Separators field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormatConfiguration) GetSeparatorsOk() (*EdiFormatConfigurationSeparators, bool) {
	if o == nil || o.Separators == nil {
		return nil, false
	}
	return o.Separators, true
}

// HasSeparators returns a boolean if a field has been set.
func (o *EdiFormatConfiguration) HasSeparators() bool {
	if o != nil && o.Separators != nil {
		return true
	}

	return false
}

// SetSeparators gets a reference to the given EdiFormatConfigurationSeparators and assigns it to the Separators field.
func (o *EdiFormatConfiguration) SetSeparators(v EdiFormatConfigurationSeparators) {
	o.Separators = &v
}

// GetAcknowledgementSettings returns the AcknowledgementSettings field value if set, zero value otherwise.
func (o *EdiFormatConfiguration) GetAcknowledgementSettings() EdiFormatConfigurationAcknowledgementSettings {
	if o == nil || o.AcknowledgementSettings == nil {
		var ret EdiFormatConfigurationAcknowledgementSettings
		return ret
	}
	return *o.AcknowledgementSettings
}

// GetAcknowledgementSettingsOk returns a tuple with the AcknowledgementSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormatConfiguration) GetAcknowledgementSettingsOk() (*EdiFormatConfigurationAcknowledgementSettings, bool) {
	if o == nil || o.AcknowledgementSettings == nil {
		return nil, false
	}
	return o.AcknowledgementSettings, true
}

// HasAcknowledgementSettings returns a boolean if a field has been set.
func (o *EdiFormatConfiguration) HasAcknowledgementSettings() bool {
	if o != nil && o.AcknowledgementSettings != nil {
		return true
	}

	return false
}

// SetAcknowledgementSettings gets a reference to the given EdiFormatConfigurationAcknowledgementSettings and assigns it to the AcknowledgementSettings field.
func (o *EdiFormatConfiguration) SetAcknowledgementSettings(v EdiFormatConfigurationAcknowledgementSettings) {
	o.AcknowledgementSettings = &v
}

// GetWriterSettings returns the WriterSettings field value if set, zero value otherwise.
func (o *EdiFormatConfiguration) GetWriterSettings() EdiFormatConfigurationWriterSettings {
	if o == nil || o.WriterSettings == nil {
		var ret EdiFormatConfigurationWriterSettings
		return ret
	}
	return *o.WriterSettings
}

// GetWriterSettingsOk returns a tuple with the WriterSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormatConfiguration) GetWriterSettingsOk() (*EdiFormatConfigurationWriterSettings, bool) {
	if o == nil || o.WriterSettings == nil {
		return nil, false
	}
	return o.WriterSettings, true
}

// HasWriterSettings returns a boolean if a field has been set.
func (o *EdiFormatConfiguration) HasWriterSettings() bool {
	if o != nil && o.WriterSettings != nil {
		return true
	}

	return false
}

// SetWriterSettings gets a reference to the given EdiFormatConfigurationWriterSettings and assigns it to the WriterSettings field.
func (o *EdiFormatConfiguration) SetWriterSettings(v EdiFormatConfigurationWriterSettings) {
	o.WriterSettings = &v
}

// GetCharacterSetEncoding returns the CharacterSetEncoding field value if set, zero value otherwise.
func (o *EdiFormatConfiguration) GetCharacterSetEncoding() EdiFormatConfigurationCharacterSetEncoding {
	if o == nil || o.CharacterSetEncoding == nil {
		var ret EdiFormatConfigurationCharacterSetEncoding
		return ret
	}
	return *o.CharacterSetEncoding
}

// GetCharacterSetEncodingOk returns a tuple with the CharacterSetEncoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormatConfiguration) GetCharacterSetEncodingOk() (*EdiFormatConfigurationCharacterSetEncoding, bool) {
	if o == nil || o.CharacterSetEncoding == nil {
		return nil, false
	}
	return o.CharacterSetEncoding, true
}

// HasCharacterSetEncoding returns a boolean if a field has been set.
func (o *EdiFormatConfiguration) HasCharacterSetEncoding() bool {
	if o != nil && o.CharacterSetEncoding != nil {
		return true
	}

	return false
}

// SetCharacterSetEncoding gets a reference to the given EdiFormatConfigurationCharacterSetEncoding and assigns it to the CharacterSetEncoding field.
func (o *EdiFormatConfiguration) SetCharacterSetEncoding(v EdiFormatConfigurationCharacterSetEncoding) {
	o.CharacterSetEncoding = &v
}

// GetTerminatorDelimiter returns the TerminatorDelimiter field value if set, zero value otherwise.
func (o *EdiFormatConfiguration) GetTerminatorDelimiter() EdiFormatConfigurationTerminatorDelimiter {
	if o == nil || o.TerminatorDelimiter == nil {
		var ret EdiFormatConfigurationTerminatorDelimiter
		return ret
	}
	return *o.TerminatorDelimiter
}

// GetTerminatorDelimiterOk returns a tuple with the TerminatorDelimiter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormatConfiguration) GetTerminatorDelimiterOk() (*EdiFormatConfigurationTerminatorDelimiter, bool) {
	if o == nil || o.TerminatorDelimiter == nil {
		return nil, false
	}
	return o.TerminatorDelimiter, true
}

// HasTerminatorDelimiter returns a boolean if a field has been set.
func (o *EdiFormatConfiguration) HasTerminatorDelimiter() bool {
	if o != nil && o.TerminatorDelimiter != nil {
		return true
	}

	return false
}

// SetTerminatorDelimiter gets a reference to the given EdiFormatConfigurationTerminatorDelimiter and assigns it to the TerminatorDelimiter field.
func (o *EdiFormatConfiguration) SetTerminatorDelimiter(v EdiFormatConfigurationTerminatorDelimiter) {
	o.TerminatorDelimiter = &v
}

// GetControlNumberSettings returns the ControlNumberSettings field value if set, zero value otherwise.
func (o *EdiFormatConfiguration) GetControlNumberSettings() EdiFormatConfigurationControlNumberSettings {
	if o == nil || o.ControlNumberSettings == nil {
		var ret EdiFormatConfigurationControlNumberSettings
		return ret
	}
	return *o.ControlNumberSettings
}

// GetControlNumberSettingsOk returns a tuple with the ControlNumberSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormatConfiguration) GetControlNumberSettingsOk() (*EdiFormatConfigurationControlNumberSettings, bool) {
	if o == nil || o.ControlNumberSettings == nil {
		return nil, false
	}
	return o.ControlNumberSettings, true
}

// HasControlNumberSettings returns a boolean if a field has been set.
func (o *EdiFormatConfiguration) HasControlNumberSettings() bool {
	if o != nil && o.ControlNumberSettings != nil {
		return true
	}

	return false
}

// SetControlNumberSettings gets a reference to the given EdiFormatConfigurationControlNumberSettings and assigns it to the ControlNumberSettings field.
func (o *EdiFormatConfiguration) SetControlNumberSettings(v EdiFormatConfigurationControlNumberSettings) {
	o.ControlNumberSettings = &v
}

// GetCharacterSetAndEncoding returns the CharacterSetAndEncoding field value if set, zero value otherwise.
func (o *EdiFormatConfiguration) GetCharacterSetAndEncoding() EdiFormatConfigurationCharacterSetAndEncoding {
	if o == nil || o.CharacterSetAndEncoding == nil {
		var ret EdiFormatConfigurationCharacterSetAndEncoding
		return ret
	}
	return *o.CharacterSetAndEncoding
}

// GetCharacterSetAndEncodingOk returns a tuple with the CharacterSetAndEncoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormatConfiguration) GetCharacterSetAndEncodingOk() (*EdiFormatConfigurationCharacterSetAndEncoding, bool) {
	if o == nil || o.CharacterSetAndEncoding == nil {
		return nil, false
	}
	return o.CharacterSetAndEncoding, true
}

// HasCharacterSetAndEncoding returns a boolean if a field has been set.
func (o *EdiFormatConfiguration) HasCharacterSetAndEncoding() bool {
	if o != nil && o.CharacterSetAndEncoding != nil {
		return true
	}

	return false
}

// SetCharacterSetAndEncoding gets a reference to the given EdiFormatConfigurationCharacterSetAndEncoding and assigns it to the CharacterSetAndEncoding field.
func (o *EdiFormatConfiguration) SetCharacterSetAndEncoding(v EdiFormatConfigurationCharacterSetAndEncoding) {
	o.CharacterSetAndEncoding = &v
}

// GetParserSettings returns the ParserSettings field value if set, zero value otherwise.
func (o *EdiFormatConfiguration) GetParserSettings() EdiFormatConfigurationParserSettings {
	if o == nil || o.ParserSettings == nil {
		var ret EdiFormatConfigurationParserSettings
		return ret
	}
	return *o.ParserSettings
}

// GetParserSettingsOk returns a tuple with the ParserSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormatConfiguration) GetParserSettingsOk() (*EdiFormatConfigurationParserSettings, bool) {
	if o == nil || o.ParserSettings == nil {
		return nil, false
	}
	return o.ParserSettings, true
}

// HasParserSettings returns a boolean if a field has been set.
func (o *EdiFormatConfiguration) HasParserSettings() bool {
	if o != nil && o.ParserSettings != nil {
		return true
	}

	return false
}

// SetParserSettings gets a reference to the given EdiFormatConfigurationParserSettings and assigns it to the ParserSettings field.
func (o *EdiFormatConfiguration) SetParserSettings(v EdiFormatConfigurationParserSettings) {
	o.ParserSettings = &v
}

// GetEnvelopeHeaders returns the EnvelopeHeaders field value if set, zero value otherwise.
func (o *EdiFormatConfiguration) GetEnvelopeHeaders() EdiFormatConfigurationEnvelopeHeaders {
	if o == nil || o.EnvelopeHeaders == nil {
		var ret EdiFormatConfigurationEnvelopeHeaders
		return ret
	}
	return *o.EnvelopeHeaders
}

// GetEnvelopeHeadersOk returns a tuple with the EnvelopeHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormatConfiguration) GetEnvelopeHeadersOk() (*EdiFormatConfigurationEnvelopeHeaders, bool) {
	if o == nil || o.EnvelopeHeaders == nil {
		return nil, false
	}
	return o.EnvelopeHeaders, true
}

// HasEnvelopeHeaders returns a boolean if a field has been set.
func (o *EdiFormatConfiguration) HasEnvelopeHeaders() bool {
	if o != nil && o.EnvelopeHeaders != nil {
		return true
	}

	return false
}

// SetEnvelopeHeaders gets a reference to the given EdiFormatConfigurationEnvelopeHeaders and assigns it to the EnvelopeHeaders field.
func (o *EdiFormatConfiguration) SetEnvelopeHeaders(v EdiFormatConfigurationEnvelopeHeaders) {
	o.EnvelopeHeaders = &v
}

func (o EdiFormatConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.ConfigType != nil {
		toSerialize["configType"] = o.ConfigType
	}
	if o.FormatType != nil {
		toSerialize["formatType"] = o.FormatType
	}
	if o.FormatTypeId != nil {
		toSerialize["formatTypeId"] = o.FormatTypeId
	}
	if o.PartnerId != nil {
		toSerialize["partnerId"] = o.PartnerId
	}
	if o.AckEndpointId != nil {
		toSerialize["ackEndpointId"] = o.AckEndpointId
	}
	if o.ConfigId != nil {
		toSerialize["configId"] = o.ConfigId
	}
	if o.IsTemplate != nil {
		toSerialize["isTemplate"] = o.IsTemplate
	}
	if o.CharacterSetAndDelimitersSettings != nil {
		toSerialize["characterSetAndDelimitersSettings"] = o.CharacterSetAndDelimitersSettings
	}
	if o.WriteSettings != nil {
		toSerialize["writeSettings"] = o.WriteSettings
	}
	if o.EdifactControlNumberSettings != nil {
		toSerialize["edifactControlNumberSettings"] = o.EdifactControlNumberSettings
	}
	if o.EdifactParserSettings != nil {
		toSerialize["edifactParserSettings"] = o.EdifactParserSettings
	}
	if o.Separators != nil {
		toSerialize["separators"] = o.Separators
	}
	if o.AcknowledgementSettings != nil {
		toSerialize["acknowledgementSettings"] = o.AcknowledgementSettings
	}
	if o.WriterSettings != nil {
		toSerialize["writerSettings"] = o.WriterSettings
	}
	if o.CharacterSetEncoding != nil {
		toSerialize["characterSetEncoding"] = o.CharacterSetEncoding
	}
	if o.TerminatorDelimiter != nil {
		toSerialize["terminatorDelimiter"] = o.TerminatorDelimiter
	}
	if o.ControlNumberSettings != nil {
		toSerialize["controlNumberSettings"] = o.ControlNumberSettings
	}
	if o.CharacterSetAndEncoding != nil {
		toSerialize["characterSetAndEncoding"] = o.CharacterSetAndEncoding
	}
	if o.ParserSettings != nil {
		toSerialize["parserSettings"] = o.ParserSettings
	}
	if o.EnvelopeHeaders != nil {
		toSerialize["envelopeHeaders"] = o.EnvelopeHeaders
	}
	return json.Marshal(toSerialize)
}

type NullableEdiFormatConfiguration struct {
	value *EdiFormatConfiguration
	isSet bool
}

func (v NullableEdiFormatConfiguration) Get() *EdiFormatConfiguration {
	return v.value
}

func (v *NullableEdiFormatConfiguration) Set(val *EdiFormatConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableEdiFormatConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableEdiFormatConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEdiFormatConfiguration(val *EdiFormatConfiguration) *NullableEdiFormatConfiguration {
	return &NullableEdiFormatConfiguration{value: val, isSet: true}
}

func (v NullableEdiFormatConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEdiFormatConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


