/*
 * Partner Manager Partners API
 *
 * Anypoint Partner Manager - Partners API
 *
 * API version: v1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apm

import (
	"encoding/json"
)

// HttpConfigAllOf struct for HttpConfigAllOf
type HttpConfigAllOf struct {
	Protocol *string `json:"protocol,omitempty"`
	ServerAddress *string `json:"serverAddress,omitempty"`
	ServerPort *int32 `json:"serverPort,omitempty"`
	Path *string `json:"path,omitempty"`
	AllowedMethods *string `json:"allowedMethods,omitempty"`
	PersistentConnections *bool `json:"persistentConnections,omitempty"`
	ConnectionIdleTimeout *int32 `json:"connectionIdleTimeout,omitempty"`
	ResponseTimeout *int32 `json:"responseTimeout,omitempty"`
	AuthMode *AuthModeBaseConfig `json:"authMode,omitempty"`
	TlsContext *TLSContext `json:"tlsContext,omitempty"`
}

// NewHttpConfigAllOf instantiates a new HttpConfigAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHttpConfigAllOf() *HttpConfigAllOf {
	this := HttpConfigAllOf{}
	var protocol string = "HTTP"
	this.Protocol = &protocol
	var serverPort int32 = 80
	this.ServerPort = &serverPort
	var allowedMethods string = "POST"
	this.AllowedMethods = &allowedMethods
	var persistentConnections bool = false
	this.PersistentConnections = &persistentConnections
	var connectionIdleTimeout int32 = 30000
	this.ConnectionIdleTimeout = &connectionIdleTimeout
	var responseTimeout int32 = 15000
	this.ResponseTimeout = &responseTimeout
	return &this
}

// NewHttpConfigAllOfWithDefaults instantiates a new HttpConfigAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHttpConfigAllOfWithDefaults() *HttpConfigAllOf {
	this := HttpConfigAllOf{}
	var protocol string = "HTTP"
	this.Protocol = &protocol
	var serverPort int32 = 80
	this.ServerPort = &serverPort
	var allowedMethods string = "POST"
	this.AllowedMethods = &allowedMethods
	var persistentConnections bool = false
	this.PersistentConnections = &persistentConnections
	var connectionIdleTimeout int32 = 30000
	this.ConnectionIdleTimeout = &connectionIdleTimeout
	var responseTimeout int32 = 15000
	this.ResponseTimeout = &responseTimeout
	return &this
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *HttpConfigAllOf) GetProtocol() string {
	if o == nil || o.Protocol == nil {
		var ret string
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConfigAllOf) GetProtocolOk() (*string, bool) {
	if o == nil || o.Protocol == nil {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *HttpConfigAllOf) HasProtocol() bool {
	if o != nil && o.Protocol != nil {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given string and assigns it to the Protocol field.
func (o *HttpConfigAllOf) SetProtocol(v string) {
	o.Protocol = &v
}

// GetServerAddress returns the ServerAddress field value if set, zero value otherwise.
func (o *HttpConfigAllOf) GetServerAddress() string {
	if o == nil || o.ServerAddress == nil {
		var ret string
		return ret
	}
	return *o.ServerAddress
}

// GetServerAddressOk returns a tuple with the ServerAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConfigAllOf) GetServerAddressOk() (*string, bool) {
	if o == nil || o.ServerAddress == nil {
		return nil, false
	}
	return o.ServerAddress, true
}

// HasServerAddress returns a boolean if a field has been set.
func (o *HttpConfigAllOf) HasServerAddress() bool {
	if o != nil && o.ServerAddress != nil {
		return true
	}

	return false
}

// SetServerAddress gets a reference to the given string and assigns it to the ServerAddress field.
func (o *HttpConfigAllOf) SetServerAddress(v string) {
	o.ServerAddress = &v
}

// GetServerPort returns the ServerPort field value if set, zero value otherwise.
func (o *HttpConfigAllOf) GetServerPort() int32 {
	if o == nil || o.ServerPort == nil {
		var ret int32
		return ret
	}
	return *o.ServerPort
}

// GetServerPortOk returns a tuple with the ServerPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConfigAllOf) GetServerPortOk() (*int32, bool) {
	if o == nil || o.ServerPort == nil {
		return nil, false
	}
	return o.ServerPort, true
}

// HasServerPort returns a boolean if a field has been set.
func (o *HttpConfigAllOf) HasServerPort() bool {
	if o != nil && o.ServerPort != nil {
		return true
	}

	return false
}

// SetServerPort gets a reference to the given int32 and assigns it to the ServerPort field.
func (o *HttpConfigAllOf) SetServerPort(v int32) {
	o.ServerPort = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *HttpConfigAllOf) GetPath() string {
	if o == nil || o.Path == nil {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConfigAllOf) GetPathOk() (*string, bool) {
	if o == nil || o.Path == nil {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *HttpConfigAllOf) HasPath() bool {
	if o != nil && o.Path != nil {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *HttpConfigAllOf) SetPath(v string) {
	o.Path = &v
}

// GetAllowedMethods returns the AllowedMethods field value if set, zero value otherwise.
func (o *HttpConfigAllOf) GetAllowedMethods() string {
	if o == nil || o.AllowedMethods == nil {
		var ret string
		return ret
	}
	return *o.AllowedMethods
}

// GetAllowedMethodsOk returns a tuple with the AllowedMethods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConfigAllOf) GetAllowedMethodsOk() (*string, bool) {
	if o == nil || o.AllowedMethods == nil {
		return nil, false
	}
	return o.AllowedMethods, true
}

// HasAllowedMethods returns a boolean if a field has been set.
func (o *HttpConfigAllOf) HasAllowedMethods() bool {
	if o != nil && o.AllowedMethods != nil {
		return true
	}

	return false
}

// SetAllowedMethods gets a reference to the given string and assigns it to the AllowedMethods field.
func (o *HttpConfigAllOf) SetAllowedMethods(v string) {
	o.AllowedMethods = &v
}

// GetPersistentConnections returns the PersistentConnections field value if set, zero value otherwise.
func (o *HttpConfigAllOf) GetPersistentConnections() bool {
	if o == nil || o.PersistentConnections == nil {
		var ret bool
		return ret
	}
	return *o.PersistentConnections
}

// GetPersistentConnectionsOk returns a tuple with the PersistentConnections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConfigAllOf) GetPersistentConnectionsOk() (*bool, bool) {
	if o == nil || o.PersistentConnections == nil {
		return nil, false
	}
	return o.PersistentConnections, true
}

// HasPersistentConnections returns a boolean if a field has been set.
func (o *HttpConfigAllOf) HasPersistentConnections() bool {
	if o != nil && o.PersistentConnections != nil {
		return true
	}

	return false
}

// SetPersistentConnections gets a reference to the given bool and assigns it to the PersistentConnections field.
func (o *HttpConfigAllOf) SetPersistentConnections(v bool) {
	o.PersistentConnections = &v
}

// GetConnectionIdleTimeout returns the ConnectionIdleTimeout field value if set, zero value otherwise.
func (o *HttpConfigAllOf) GetConnectionIdleTimeout() int32 {
	if o == nil || o.ConnectionIdleTimeout == nil {
		var ret int32
		return ret
	}
	return *o.ConnectionIdleTimeout
}

// GetConnectionIdleTimeoutOk returns a tuple with the ConnectionIdleTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConfigAllOf) GetConnectionIdleTimeoutOk() (*int32, bool) {
	if o == nil || o.ConnectionIdleTimeout == nil {
		return nil, false
	}
	return o.ConnectionIdleTimeout, true
}

// HasConnectionIdleTimeout returns a boolean if a field has been set.
func (o *HttpConfigAllOf) HasConnectionIdleTimeout() bool {
	if o != nil && o.ConnectionIdleTimeout != nil {
		return true
	}

	return false
}

// SetConnectionIdleTimeout gets a reference to the given int32 and assigns it to the ConnectionIdleTimeout field.
func (o *HttpConfigAllOf) SetConnectionIdleTimeout(v int32) {
	o.ConnectionIdleTimeout = &v
}

// GetResponseTimeout returns the ResponseTimeout field value if set, zero value otherwise.
func (o *HttpConfigAllOf) GetResponseTimeout() int32 {
	if o == nil || o.ResponseTimeout == nil {
		var ret int32
		return ret
	}
	return *o.ResponseTimeout
}

// GetResponseTimeoutOk returns a tuple with the ResponseTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConfigAllOf) GetResponseTimeoutOk() (*int32, bool) {
	if o == nil || o.ResponseTimeout == nil {
		return nil, false
	}
	return o.ResponseTimeout, true
}

// HasResponseTimeout returns a boolean if a field has been set.
func (o *HttpConfigAllOf) HasResponseTimeout() bool {
	if o != nil && o.ResponseTimeout != nil {
		return true
	}

	return false
}

// SetResponseTimeout gets a reference to the given int32 and assigns it to the ResponseTimeout field.
func (o *HttpConfigAllOf) SetResponseTimeout(v int32) {
	o.ResponseTimeout = &v
}

// GetAuthMode returns the AuthMode field value if set, zero value otherwise.
func (o *HttpConfigAllOf) GetAuthMode() AuthModeBaseConfig {
	if o == nil || o.AuthMode == nil {
		var ret AuthModeBaseConfig
		return ret
	}
	return *o.AuthMode
}

// GetAuthModeOk returns a tuple with the AuthMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConfigAllOf) GetAuthModeOk() (*AuthModeBaseConfig, bool) {
	if o == nil || o.AuthMode == nil {
		return nil, false
	}
	return o.AuthMode, true
}

// HasAuthMode returns a boolean if a field has been set.
func (o *HttpConfigAllOf) HasAuthMode() bool {
	if o != nil && o.AuthMode != nil {
		return true
	}

	return false
}

// SetAuthMode gets a reference to the given AuthModeBaseConfig and assigns it to the AuthMode field.
func (o *HttpConfigAllOf) SetAuthMode(v AuthModeBaseConfig) {
	o.AuthMode = &v
}

// GetTlsContext returns the TlsContext field value if set, zero value otherwise.
func (o *HttpConfigAllOf) GetTlsContext() TLSContext {
	if o == nil || o.TlsContext == nil {
		var ret TLSContext
		return ret
	}
	return *o.TlsContext
}

// GetTlsContextOk returns a tuple with the TlsContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConfigAllOf) GetTlsContextOk() (*TLSContext, bool) {
	if o == nil || o.TlsContext == nil {
		return nil, false
	}
	return o.TlsContext, true
}

// HasTlsContext returns a boolean if a field has been set.
func (o *HttpConfigAllOf) HasTlsContext() bool {
	if o != nil && o.TlsContext != nil {
		return true
	}

	return false
}

// SetTlsContext gets a reference to the given TLSContext and assigns it to the TlsContext field.
func (o *HttpConfigAllOf) SetTlsContext(v TLSContext) {
	o.TlsContext = &v
}

func (o HttpConfigAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Protocol != nil {
		toSerialize["protocol"] = o.Protocol
	}
	if o.ServerAddress != nil {
		toSerialize["serverAddress"] = o.ServerAddress
	}
	if o.ServerPort != nil {
		toSerialize["serverPort"] = o.ServerPort
	}
	if o.Path != nil {
		toSerialize["path"] = o.Path
	}
	if o.AllowedMethods != nil {
		toSerialize["allowedMethods"] = o.AllowedMethods
	}
	if o.PersistentConnections != nil {
		toSerialize["persistentConnections"] = o.PersistentConnections
	}
	if o.ConnectionIdleTimeout != nil {
		toSerialize["connectionIdleTimeout"] = o.ConnectionIdleTimeout
	}
	if o.ResponseTimeout != nil {
		toSerialize["responseTimeout"] = o.ResponseTimeout
	}
	if o.AuthMode != nil {
		toSerialize["authMode"] = o.AuthMode
	}
	if o.TlsContext != nil {
		toSerialize["tlsContext"] = o.TlsContext
	}
	return json.Marshal(toSerialize)
}

type NullableHttpConfigAllOf struct {
	value *HttpConfigAllOf
	isSet bool
}

func (v NullableHttpConfigAllOf) Get() *HttpConfigAllOf {
	return v.value
}

func (v *NullableHttpConfigAllOf) Set(val *HttpConfigAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableHttpConfigAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpConfigAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpConfigAllOf(val *HttpConfigAllOf) *NullableHttpConfigAllOf {
	return &NullableHttpConfigAllOf{value: val, isSet: true}
}

func (v NullableHttpConfigAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpConfigAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


