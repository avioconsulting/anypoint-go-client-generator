/*
 * Partner Manager Partners API
 *
 * Anypoint Partner Manager - Partners API
 *
 * API version: v1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apm

import (
	"encoding/json"
)

// EdiDocument EDI Document instanace. Individual document instance can be distinguished by formatType types such as X12.
type EdiDocument struct {
	FormatType string `json:"formatType"`
}

// NewEdiDocument instantiates a new EdiDocument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEdiDocument(formatType string) *EdiDocument {
	this := EdiDocument{}
	this.FormatType = formatType
	return &this
}

// NewEdiDocumentWithDefaults instantiates a new EdiDocument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEdiDocumentWithDefaults() *EdiDocument {
	this := EdiDocument{}
	return &this
}

// GetFormatType returns the FormatType field value
func (o *EdiDocument) GetFormatType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FormatType
}

// GetFormatTypeOk returns a tuple with the FormatType field value
// and a boolean to check if the value has been set.
func (o *EdiDocument) GetFormatTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FormatType, true
}

// SetFormatType sets field value
func (o *EdiDocument) SetFormatType(v string) {
	o.FormatType = v
}

func (o EdiDocument) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["formatType"] = o.FormatType
	}
	return json.Marshal(toSerialize)
}

type NullableEdiDocument struct {
	value *EdiDocument
	isSet bool
}

func (v NullableEdiDocument) Get() *EdiDocument {
	return v.value
}

func (v *NullableEdiDocument) Set(val *EdiDocument) {
	v.value = val
	v.isSet = true
}

func (v NullableEdiDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableEdiDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEdiDocument(val *EdiDocument) *NullableEdiDocument {
	return &NullableEdiDocument{value: val, isSet: true}
}

func (v NullableEdiDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEdiDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


