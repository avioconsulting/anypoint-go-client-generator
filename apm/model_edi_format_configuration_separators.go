/*
 * Partner Manager Partners API
 *
 * Anypoint Partner Manager - Partners API
 *
 * API version: v1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apm

import (
	"encoding/json"
)

// EdiFormatConfigurationSeparators struct for EdiFormatConfigurationSeparators
type EdiFormatConfigurationSeparators struct {
	DataSeparator *string `json:"dataSeparator,omitempty"`
	ComponentSeparator *string `json:"componentSeparator,omitempty"`
	RepetitionSeparator *string `json:"repetitionSeparator,omitempty"`
	SegmentTerminator *string `json:"segmentTerminator,omitempty"`
	ReleaseCharacter *string `json:"releaseCharacter,omitempty"`
}

// NewEdiFormatConfigurationSeparators instantiates a new EdiFormatConfigurationSeparators object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEdiFormatConfigurationSeparators() *EdiFormatConfigurationSeparators {
	this := EdiFormatConfigurationSeparators{}
	return &this
}

// NewEdiFormatConfigurationSeparatorsWithDefaults instantiates a new EdiFormatConfigurationSeparators object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEdiFormatConfigurationSeparatorsWithDefaults() *EdiFormatConfigurationSeparators {
	this := EdiFormatConfigurationSeparators{}
	return &this
}

// GetDataSeparator returns the DataSeparator field value if set, zero value otherwise.
func (o *EdiFormatConfigurationSeparators) GetDataSeparator() string {
	if o == nil || o.DataSeparator == nil {
		var ret string
		return ret
	}
	return *o.DataSeparator
}

// GetDataSeparatorOk returns a tuple with the DataSeparator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormatConfigurationSeparators) GetDataSeparatorOk() (*string, bool) {
	if o == nil || o.DataSeparator == nil {
		return nil, false
	}
	return o.DataSeparator, true
}

// HasDataSeparator returns a boolean if a field has been set.
func (o *EdiFormatConfigurationSeparators) HasDataSeparator() bool {
	if o != nil && o.DataSeparator != nil {
		return true
	}

	return false
}

// SetDataSeparator gets a reference to the given string and assigns it to the DataSeparator field.
func (o *EdiFormatConfigurationSeparators) SetDataSeparator(v string) {
	o.DataSeparator = &v
}

// GetComponentSeparator returns the ComponentSeparator field value if set, zero value otherwise.
func (o *EdiFormatConfigurationSeparators) GetComponentSeparator() string {
	if o == nil || o.ComponentSeparator == nil {
		var ret string
		return ret
	}
	return *o.ComponentSeparator
}

// GetComponentSeparatorOk returns a tuple with the ComponentSeparator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormatConfigurationSeparators) GetComponentSeparatorOk() (*string, bool) {
	if o == nil || o.ComponentSeparator == nil {
		return nil, false
	}
	return o.ComponentSeparator, true
}

// HasComponentSeparator returns a boolean if a field has been set.
func (o *EdiFormatConfigurationSeparators) HasComponentSeparator() bool {
	if o != nil && o.ComponentSeparator != nil {
		return true
	}

	return false
}

// SetComponentSeparator gets a reference to the given string and assigns it to the ComponentSeparator field.
func (o *EdiFormatConfigurationSeparators) SetComponentSeparator(v string) {
	o.ComponentSeparator = &v
}

// GetRepetitionSeparator returns the RepetitionSeparator field value if set, zero value otherwise.
func (o *EdiFormatConfigurationSeparators) GetRepetitionSeparator() string {
	if o == nil || o.RepetitionSeparator == nil {
		var ret string
		return ret
	}
	return *o.RepetitionSeparator
}

// GetRepetitionSeparatorOk returns a tuple with the RepetitionSeparator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormatConfigurationSeparators) GetRepetitionSeparatorOk() (*string, bool) {
	if o == nil || o.RepetitionSeparator == nil {
		return nil, false
	}
	return o.RepetitionSeparator, true
}

// HasRepetitionSeparator returns a boolean if a field has been set.
func (o *EdiFormatConfigurationSeparators) HasRepetitionSeparator() bool {
	if o != nil && o.RepetitionSeparator != nil {
		return true
	}

	return false
}

// SetRepetitionSeparator gets a reference to the given string and assigns it to the RepetitionSeparator field.
func (o *EdiFormatConfigurationSeparators) SetRepetitionSeparator(v string) {
	o.RepetitionSeparator = &v
}

// GetSegmentTerminator returns the SegmentTerminator field value if set, zero value otherwise.
func (o *EdiFormatConfigurationSeparators) GetSegmentTerminator() string {
	if o == nil || o.SegmentTerminator == nil {
		var ret string
		return ret
	}
	return *o.SegmentTerminator
}

// GetSegmentTerminatorOk returns a tuple with the SegmentTerminator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormatConfigurationSeparators) GetSegmentTerminatorOk() (*string, bool) {
	if o == nil || o.SegmentTerminator == nil {
		return nil, false
	}
	return o.SegmentTerminator, true
}

// HasSegmentTerminator returns a boolean if a field has been set.
func (o *EdiFormatConfigurationSeparators) HasSegmentTerminator() bool {
	if o != nil && o.SegmentTerminator != nil {
		return true
	}

	return false
}

// SetSegmentTerminator gets a reference to the given string and assigns it to the SegmentTerminator field.
func (o *EdiFormatConfigurationSeparators) SetSegmentTerminator(v string) {
	o.SegmentTerminator = &v
}

// GetReleaseCharacter returns the ReleaseCharacter field value if set, zero value otherwise.
func (o *EdiFormatConfigurationSeparators) GetReleaseCharacter() string {
	if o == nil || o.ReleaseCharacter == nil {
		var ret string
		return ret
	}
	return *o.ReleaseCharacter
}

// GetReleaseCharacterOk returns a tuple with the ReleaseCharacter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdiFormatConfigurationSeparators) GetReleaseCharacterOk() (*string, bool) {
	if o == nil || o.ReleaseCharacter == nil {
		return nil, false
	}
	return o.ReleaseCharacter, true
}

// HasReleaseCharacter returns a boolean if a field has been set.
func (o *EdiFormatConfigurationSeparators) HasReleaseCharacter() bool {
	if o != nil && o.ReleaseCharacter != nil {
		return true
	}

	return false
}

// SetReleaseCharacter gets a reference to the given string and assigns it to the ReleaseCharacter field.
func (o *EdiFormatConfigurationSeparators) SetReleaseCharacter(v string) {
	o.ReleaseCharacter = &v
}

func (o EdiFormatConfigurationSeparators) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DataSeparator != nil {
		toSerialize["dataSeparator"] = o.DataSeparator
	}
	if o.ComponentSeparator != nil {
		toSerialize["componentSeparator"] = o.ComponentSeparator
	}
	if o.RepetitionSeparator != nil {
		toSerialize["repetitionSeparator"] = o.RepetitionSeparator
	}
	if o.SegmentTerminator != nil {
		toSerialize["segmentTerminator"] = o.SegmentTerminator
	}
	if o.ReleaseCharacter != nil {
		toSerialize["releaseCharacter"] = o.ReleaseCharacter
	}
	return json.Marshal(toSerialize)
}

type NullableEdiFormatConfigurationSeparators struct {
	value *EdiFormatConfigurationSeparators
	isSet bool
}

func (v NullableEdiFormatConfigurationSeparators) Get() *EdiFormatConfigurationSeparators {
	return v.value
}

func (v *NullableEdiFormatConfigurationSeparators) Set(val *EdiFormatConfigurationSeparators) {
	v.value = val
	v.isSet = true
}

func (v NullableEdiFormatConfigurationSeparators) IsSet() bool {
	return v.isSet
}

func (v *NullableEdiFormatConfigurationSeparators) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEdiFormatConfigurationSeparators(val *EdiFormatConfigurationSeparators) *NullableEdiFormatConfigurationSeparators {
	return &NullableEdiFormatConfigurationSeparators{value: val, isSet: true}
}

func (v NullableEdiFormatConfigurationSeparators) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEdiFormatConfigurationSeparators) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


